


Sift API Overview

Sift is the leader in Digital Trust & Safety, empowering organizations of all sizes 
to unlock new revenue without risk using machine learning. Sift helps businesses 
to make accurate, real-time decisions that both improve user experience and increase 
revenue. You can use Sift whether you’re building a brand new risk system or looking 
to augment an existing legacy system.
Sift makes risk predictions in real-time using your own data and data from across 
Sift’s global network. Our machine learning systems identify
patterns of behavior across thousands of device, user, network, and transactional 
signals. These are often patterns that only a machine learning system can spot. Using 
Sift, businesses have stopped 100s billions of dollars of fraud worldwide.
There are many abuse use cases that Sift can stop:
- Payment Protection - Reduce friction at checkout to increase revenue and stop 
chargebacks before they hurt your business.
- Account Defense
-- Account Abuse - Stop fake accounts from polluting your service and 
block fraudulent users before they harm your business.
-- Account Takeover - Stop fraudulent actors from hijacking users accounts. Keep 
your users safe and ensure that they always trust your service.
- Content Integrity - Stop spammy and scammy posts from polluting your service. 
Keep your users safe from malicious actors.
- Promotion Abuse - Make sure you’re only rewarding real users by stopping 
referral rings and repeated use of promotions.
Sift easily integrates into your existing systems using modern REST APIs , Javascript snippet , and SDKs for iOS and Android. In addition, Sift offers Workflows , a powerful rules automation platform, and 
Review Queues. These enable you to build a complete solution with Sift.
The next sections will walk you through getting started with Sift.


Sending Data to Sift

To use Sift, we need to know about the transactions and events on your website and/or mobile apps and 
what actions you take in response to them. This includes:
- How your users are interacting on your website and/or mobile apps (e.g., what pages 
they are visiting, which devices they are using, how long they spend on each page, etc). 
We automatically collect this data when you add our JavaScript snippet to your 
website and our Mobile SDKs to your app.
- What actions your users are taking, usually key user lifecycle events (e.g., creating an 
account, placing an order, posting content to other users, etc.). You will send this data 
from your application to Sift via our REST API .
- What actions your business is taking in response to users (e.g., approve an order, block and event 
due to fraud, cancel order due to chargeback, etc). You will also send this data from your 
application to Sift via our Decisions API .
Because Sift gets smarter the more data it has about your business, you can jump start your 
integration by backfilling a few months worth of historical data.
If you have any questions about what data to send to Sift, check our integration guides for recommendations based on your type of 
business. If you have any other questions, don’t hesitate to contact us at support@sift.com .


Get Started with Sift Scores

Once you start sending data, Sift starts to make predictions about whether a user’s actions are 
legitimate or fraudulent. Sift represents this risk with a score between 0 and 100, where risky events 
have higher scores. Sift generates a unique score per type of fraud you're preventing 
(e.g., payment fraud, content abuse, etc.), so a user’s events could have a high score for one type 
of abuse and a low score for another.
Sift’s risk scores are generated in real-time in response to whatever data has been sent. 
As you send more data for an event, the predictions will become more accurate. Scores can 
both increase or decrease in response to new data. It all depends on whether the user is 
exhibiting legitimate or risky patterns.
You’ll use Sift risk scores to help you make decisions about your users’ actions at key lifecycle 
events (e.g., creating an account, placing an order, etc.). For example, whether you want to 
automatically block an order, send it to manual review or approve it, all these choices can 
be decided based on the Sift Score. Since all businesses are different, finding your unique 
score thresholds that achieve your business goals is key. Don’t hesitate to email support@sift.com if you need any help 
choosing the score thresholds that make sense for you.


Build your Business Logic With Sift Scores

The final step to using Sift is adding business logic that makes Decisions based 
on the Sift risk score. This step is so important because the real power of Sift 
is using machine learning to efficiently and accurately automate decisions in your business.
Here’s an example of using Sift to stop payments fraud. When an order is created by a user, 
the business checks the Sift Score:
- If the score is low, automatically approve the order.
- If the score is high, automatically block the order and flag the user ID.
- If the score is mid range, send the order to a review queue where an analyst can decide the best next step.
To build this business logic, there are two different approaches that you can take. 
You should choose your approach based on your business needs.
Create a Sift Workflow

You can build your business logic on Sift with our Workflows Platform. Workflows let you set 
up criteria that get evaluated whenever specified events occur. For example, you can setup a 
Workflow that evaluates whenever a user creates an account. You can specify criteria (e.g., 
country = “Canada” & Sift Score > 80) that when met, Sift will auto-block, auto-accept, or send the user
ID to a Sift Review Queue for manual review. The configuration is all up to you, and logic can be 
updated by your fraud manager without any developer involvement. Learn more about setting up Sift Workflows .
Create Business Logic Within Your App 

You can build your business logic within your application using Sift Scores. You can request 
Sift Scores synchronously each time you send an event. This will allow you to implement Sift Scores into your 
existing internal systems and manual review tools. Note, make sure to send all of the decisions 
from your system to Sift as Decision events.
For more information on building any of the above, check out our list of vertical-specific tutorials . They'll help you customize your Sift 
integration to fit your unique business needs. Client libraries are also available.


Overview

The Core Topics section covers items that are generally applicable across 
Sift’s APIs and answers questions common developers have about integrating 
and using Sift.


Client Libraries

Sift provides client libraries in Python, Ruby, PHP and Java. They provide a wrapper for 
Sift’s APIs and will help with sending events and decisions or receiving scores.
Installation instructions can be found in the Client Libraries Tutorial or in the respective Github repositories below:

 Python -  https://github.com/SiftScience/sift-python
 Ruby -  https://github.com/SiftScience/sift-ruby
 PHP -  https://github.com/SiftScience/sift-php
 Java -  https://github.com/SiftScience/sift-java

Note

If you’re not seeing a client library in a language you use, please let us know what you’d 
like us to support via email: support@sift.com .



Authentication

Authentication is required for requests to Sift. Sift uses API Keys to
authenticate REST API requests, and a separate Beacon Key to authenticate events from our
SDKs.  Keys are available in two classes: production for your live site once you’ve
tested new parts of an integration, and sandbox for testing or getting started.
For greater security, you may also create a restricted API Key with 
specific permissions to your account data. A restricted key provides 
only permissions and access to data for an application that you permit, 
protecting the data that the application doesn’t need. For example, you 
may create a restricted key that grants only permission to retrieve Order 
data for the purposes of informing your Chargeback Management service. API 
Keys offer the ability to edit access to the following resources:
- Events API
- Scores - Score and Rescore
- Feedback - Labels and Decisions
- Device Fingerprinting
- Verifications API
- Webhooks API
- Retrieve Orders
- Console widget API
If a restricted key is no longer needed, or possibly compromised, access
to the key may be disabled or revoked at any time. You also have the ability
to edit the permissions of already existing keys.
Restricted keys are only intended to be used for applications which require
partial access to your Sift data, and should not be used for the standard Sift integration.
Keys can found within the Sift Console under API Keys .  
Detailed guidance for each API or SDK can found within their reference sections.

 Requirements for Component JS SDK, iOS SDK, and Android SDK -  Authenticate with a Beacon Key
 Requirements for Component Events API, Score API -  Authenticate with API Keys
 Requirements for Component Decisions API, Device Fingerprinting API -  Authenticate with API Keys and the Account ID

Note

When integrating Sift, it’s strongly recommended that you first test your changes by
sending all data to the sandbox console with your sandbox API Keys prior to sending
data with production API Keys.
For authenticating Decision Webhooks sent to your servers by Sift, you can configure a Webhook Signature Key .



Sandbox

Sift recommends that developers utilize the sandbox environment when testing new 
elements of Sift. This sandbox environment allows you to send test events or client data 
to Sift without impacting the scores Sift produces in production. To get access to your 
sandbox keys, visit the API Keys section 
of the console Developer center and make sure you’ve selected sandbox mode. Selecting
sandbox mode will switch you to the sandbox view so you can see all your test data in
the console (e.g. Explore, Queues, Workflows, etc.).


Error Reference

A successful API request will respond with an HTTP 200 . An invalid API 
request will respond with an HTTP 400 . The response body will be a JSON 
object describing why the request failed. If Sift’s servers are dealing with unexpected 
problems, you’ll get a HTTP 500 response. A non-zero status indicates an error.
In the case that you’re using the return_score or return_workflow_status query parameter, you’ll also want to examine the score object within the response for failures.
Possible Status Codes

- -4 Service currently unavailable. Please try again later.
- -3 Server-side timeout processing request. Please try again later.
- -2 Unexpected server-side error
- -1 Unexpected server-side error
- 0 Success
- 50 Invalid Request
- 51 Invalid API Key
- 52 Invalid characters in field name
- 53 Invalid characters in field value
- 54 Specified user_id has no scoreable events
- 55 Missing required field
- 56 Invalid JSON in request
- 57 Invalid HTTP body
- 58 Invalid event: Event occurs in future
- 59 $user_id not URI encoded
- 60 Rate limited
- 61 Account disabled
- 62 Product not selected
- 63 Invalid Credentials
- 100 Required fields missing
- 102 Parameter encoding failure
- 103 No events for user found
- 104 Invalid API version
- 105 Not a valid reserved field
- 106 Missing event specific fields (could reference the event)
- 107 Score not ready for user
- 108 No events for session
- 109 Invalid parameter value
- 110 Incorrect event sent to $transaction only account
- 111 Feature disabled
- 112 Abuse product disabled
- 113 Conflicting fields selected
- 114 Invalid event type
- 115 Invalid abuse type requested
- 116 Event cannot be processed due to legal restrictions
- 117 List exceeds maximum size


Changelog

This changelog tracks updates to Sift's APIs since February 2018. Detailed
 changelogs can also be found for our client libraries and SDKs in Github.

 Updates for Date December 2022 -  API : Added fields $wallet_address and $wallet_type to $payment_method field.  API : Added $digital_order complex field which should be used in $create_order , $update_order and $transaction events.  API : Added fields $receiver_wallet_address and $receiver_external_address to $transaction event.
 Updates for Date November 2022 -  API : Added PSP Merchant Management API to manage PSP Merchant summaries.
 Updates for Date April 2022 -  API : Added $merchant_profile field to $create_account , $chargeback and $update_account events.
 Updates for Date Oct 2021 -  API : Added $merchant_profile complex field which should be used in $create_order , $update_order and $transaction events.  API : Added allowed values $buy , $sell , $send , and $receive for $transaction_type field.  API : Added allowed values $sepa_credit , $sepa_instant_credit , $sepa_direct_debit , $wire_credit , $wire_debit , $ach_credit , and $ach_debit for $payment_type field.  API : Added fields $status_3ds , $triggered_3ds , $merchant_initiated_transaction , $sent_address , and $received_address to $transaction event.  API : Added fields $shortened_iban_first6 , $shortened_iban_last4 , $sepa_direct_debit_mandate , $account_holder_name , $account_number_last5 , $bank_name , and $bank_country to $payment_method field.
 Updates for Date July 2021 -  API : Added the $shipping_tracking_numbers field and marking $shipping_tracking_number as "Deprecated" (which will later be removed)
 Updates for Date December 2020 -  API : Changed the description of $user_email field for $login event
 Updates for Date September 2020 -  API : Added $shipping_carrier and $shipping_tracking_number fields
to $create_order and $update_order events.
 Updates for Date May 2020 -  API : Added a new allowed value of $apple for $social_sign_on_type field.  API : Added a new optional field $decline_category to $transaction to map common decline reason codes to a set of standardized decline categories.
 Updates for Date April 2020 -  API : Changed required fields on $chargeback event. The $user_id field is now recommended
instead of required, and only one of $order_id or $transaction_id is required.
 Updates for Date February 2020 -  API : Added more allowed values $face , $fingerprint , push , security_key to field $verification_type in reserved event $verification .
 Updates for Date January 2020 -  API : Added $client_language field to $app complex field.  API : Added $accept_language and $content_language fields to $browser complex field.  API : Added $ordered_from complex field which should be used in $create_order , $update_order and $transaction events.  API : Added $site_country , $site_domain and $brand_name fields to
custom events and all reserved events except $chargeback , $link_session_to_user , and $flag_content .
 Updates for Date February 2019 -  API : Added $app and $browser complex fields
 to the following reserved events: $content_status , $order_status , $security_notification , and $verification .  API : Added $update_password event to capture user- and service- 
initiated password changes.  API : Added $account_types field to $login , $create_account and $update_account events, to optimize for 
various types of user accounts.  API : Added $verified_event and $verified_entity_id to the $verification event to track verifications triggered by most 
reserved events.  API : Added $reason to $verification events to 
distinguish verifications that are always on from verifications triggered on risk.  API : Added support for knowledge-based verifications through $shared_knowledge field in the $verification event.  API : Added $social_sign_on_type to $login for use 
in ATO workflows; add reserved values for $microsoft and $amazon accounts.
 Updates for Date January 2019 -  API : Changed references to Sift API calls in the developer
 docs to api.sift.com . Previous requests to api3.siftscience.com will still function, this will simplify the experience for Sift developers.  API : Added support for $failure_reason , $account_types , $username and $social_sign_on_type to $login event.
 Updates for Date October 2018 -  API : Added support for Rescore User and Get User Score APIs.  API : Added $app and $browser complex fields
 to the following reserved events: $add_item_to_cart , $add_promotion , $create_account , $create_content , $create_order , $logout , $remove_item_from_cart , $transaction , $update_account , $update_content and custom events.
 Updates for Date June 2018 -  API : Added support for retrieving the decision status of
 a session to Decisions API .
 Updates for Date March 2018 -  API : Released Sift API Version 205, including major updates to $create_content and $update_content .  API : Added support for content decisions to Decisions API .
 Updates for Date February 2018 -  API : Added support for $security_notification event.  API : Added support for applying decisions to sessions and retrieve
 the list of session-level decisions in Decisions API .


Tracking User IDs and Sessions

Sift uses user ID and session ID to track user IDs and sessions respectively.  Both are important
for Sift to be able to understand the activity related to your user ID and it’s strongly 
recommended that these are sent whenever possible. A $user_id should be a field 
that the user cannot update (e.g. if they can change their email address, a different
unique identifier is recommended).
Tracking Anonymous Actions

You may have some periods of time when the $user_id is not apparent for a user – 
either because they have not logged in, or because you’re doing something like guest 
checkout where the $user_id has not been assigned yet. In those cases:
- In the Javascript Snippet, set _user_id to the empty string.
- In the Mobile SDKs, call setUserId once the user has signed in.
- In the REST API, for events that you do not need a score returned, set $user_id to an empty string and set $session_id to match the value provided in the JavaScript 
snippet, if applicable. Events sent without a user ID will not be scored, and will not trigger
Workflows. Once the user has logged in or created an account, send a subsequent event, or a $link_session_to_user event with the user ID set, and the same session ID.
- In the REST API, for events that need a score returned, pass a different unique identifier 
in the $user_id field (e.g. email address or transaction ID).


Reserved and Custom Events

When sending requests to the REST APIs, you can send both reserved and custom data. 
Reserved events and fields are events that Sift has defined, that Sift can do advanced 
analysis on. When possible, send the user actions taken on your site or app with 
reserved events or fields. Reserved events or fields are denoted by the $ character 
prior to the event or field name (e.g. $login event or $user_id field). 
Each event accepts required, reserved, and custom fields.
Custom Events and Fields 

Custom events are events you create to capture actions unique to your application. If 
there are key actions or attributes your users take that are not captured by our 
reserved events, send these as custom event or custom field. Custom events still require $type , $api_key , and the presence of $user_id or $session_id .
To learn more, see examples in the Custom Events and Fields section.


Backfilling

When you’re first sending data to Sift, you may want to send critical historical data to Sift 
so there’s data available for our machine learning predictions. You’ll indicate an event is a 
historical event by sending with a $time in the past (using UNIX millis timestamp). 
You can then mark known fraudulent events through the Decisions API.
Event Backfill Guidelines

- Send the event with $time in millis.
- You should send 6-12 months of key events (e.g. account, order, content) for all user IDs
(regardless of whether they’re known to be fraudulent or legitimate.)
- Include as much historical data as you have available, including the user’s $ip if known.
- Test in sandbox first before you 
send backfill data to production.
- Be aware of rate limits and build in retry logic.
Note: While we use up to 12 months of historical data, users with activity older 
than 30 days will not show up in the console.



---Curl
// Sample $create_account event
{
  // Required for backfilling
  // UNIX timestamp in milliseconds as an integer
  "$time" : 1456274104243, // Feb 24 2016 00:35:04 UTC

  "$type"             : "$create_account",
  "$api_key"          : "YOUR_API_KEY",
  "$user_id"          : "billy_jones_301",
  "$user_email"       : "bill@gmail.com",
  "$name"             : "Bill Jones",
  "$phone"            : "1-415-555-6040",
  "$ip"               : "54.208.214.78"
}

---


---Ruby
require "sift"

client = Sift::Client.new(:api_key => "YOUR_API_KEY")

# Sample $create_account event
properties = {
  # Required for backfilling
  # UNIX timestamp in milliseconds as an integer
  "$time" => 1456274104243, # Feb 24 2016 00:35:04 UTC

  "$user_id"          => "billy_jones_301",
  "$user_email"       => "bill@gmail.com",
  "$name"             => "Bill Jones",
  "$phone"            => "1-415-555-6040",
  "$ip"               => "54.208.214.78"
}

response = client.track("$create_account", properties)

---


---Python
import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')

# Sample $create_account event
properties = {
  # Required for backfilling
  # UNIX timestamp in milliseconds as an integer
  "$time" : 1456274104243, # Feb 24 2016 00:35:04 UTC

  "$user_id"          : "billy_jones_301",
  "$user_email"       : "bill@gmail.com",
  "$name"             : "Bill Jones",
  "$phone"            : "1-415-555-6040",
  "$ip"               : "54.208.214.78"
}

response = client.track("$create_account", properties)

---


---PHP
require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => 'YOUR_API_KEY'));

// Sample $create_account event
$properties = array(
  // Required for backfilling
  // UNIX timestamp in milliseconds as an integer
  '$time' => 1456274104243, // Feb 24 2016 00:35:04 UTC

  '$user_id'          => 'billy_jones_301',
  '$user_email'       => 'bill@gmail.com',
  '$name'             => 'Bill Jones',
  '$phone'            => '1-415-555-6040',  
  '$ip'               => '54.208.214.78'
);

$response = $client->track('$create_account', $properties);

---


---Java
import com.siftscience.SiftClient;
import com.siftscience.EventRequest;

SiftClient client = new SiftClient("YOUR_API_KEY");
EventRequest request = client.buildRequest(new CreateAccountFieldSet()
        .setUserId("billy_jones_301")
        .setSessionId("gigtleqddo84l8cm15qe4il")
        .setUserEmail("bill@gmail.com")
        .setName("Bill Jones")
        .setIP("54.208.214.78")
        .setTime(1456274104243)

EventResponse response;
try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
    return;
}
response.isOk(); // true

---


Decision Backfill Guidelines

- After you have backfilled historical data, use the DECISIONS API to send Block category 
decisions for previously identified fraudulent user IDs.
- Decision Source should either be MANUAL_REVIEW , or CHARGEBACK depending on 
how you identified the user ID as fraudulent. If you don’t know how the user ID was identified 
as fraudulent originally, set the source to MANUAL_REVIEW .



---Curl
// Sample Decision Event
// Requires that you configure a Decision with this ID first
// Decisions are configured in the Sift Console
// Decisions should be named based on your real business actions
{
  "decision_id"   : "ban_user_payment_abuse",
  "source"        : "MANUAL_REVIEW",
  "analyst"       : "analyst@example.com",
  "description"   : "backfill known fraud users",
  "time"          : 1456274104243, // Feb 24 2016 00:35:04 UTC
}

---


---Ruby
# Sample Decision Event
# Requires that you configure a Decision with this ID first
# Decisions are configured in the Sift Console
# Decisions should be named based on your real business actions

require "sift"

client = Sift::Client.new(api_key: "{YOUR_API_KEY}", account_id: "accountId")

response = client.apply_decision({
  "decision_id"       => "ban_user_payment_abuse",
  "description"       => "backfill known bad users",
  "source"            =>"MANUAL_REVIEW",
  "analyst"           => "analyst@example.com",
  "user_id"           => "userId",
  "time"              => 1456274104243, # Feb 24 2016 00:35:04 UTC
})

if (!response.ok?)
  puts "Unable to apply decision: " + response.api_error_message
end

---


---Python
# Sample Decision Event
# Requires that you configure a Decision with this ID first
# Decisions are configured in the Sift Console
# Decisions should be named based on your real business actions

import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')

applyDecisionRequest = {
    'decision_id'   : 'user_looks_ok_payment_abuse',
    'source'        : 'MANUAL_REVIEW',
    'analyst'       : 'analyst@example.com',
    'description'   : 'backfill known bad users',
    'time'          : 1456274104243, # Feb 24 2016 00:35:04 UTC
}

response = client.apply_user_decision(user_id, applyDecisionRequest)

---


---PHP
// Sample Decision Event
// Requires that you configure a Decision with this ID first
// Decisions are configured in the Sift Console
// Decisions should be named based on your real business actions

require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => 'YOUR_API_KEY'));

$options = array(
    'analyst'       => 'analyst@example.com',
    'description'   => 'backfill known bad users',
    'time'          =>  1456274104243
);

$response = $client->applyDecisionToUser('userId',
    'ban_user_payment_abuse',
    'MANUAL_REVIEW',
    'time',
    $options);

---


---Java
// Sample Decision Event
// Requires that you configure a Decision with this ID first
// Decisions are configured in the Sift Console
// Decisions should be named based on your real business actions

import com.siftscience.SiftClient;
import com.siftscience.DecisionStatusResponse;
import com.siftscience.DecisionStatusRequest;
import com.siftscience.model.DecisionStatusFieldSet;

SiftClient client = new SiftClient("{YOUR_API_KEY}");
ApplyDecisionRequest request;
ApplyDecisionRequest request = client.buildRequest(
    new ApplyDecisionFieldSet()
        .setAccountId("accountId")
        .setUserId("userId")
        .setDecisionId("ban_user_payment_abuse")
        .setSource(DecisionSource.MANUAL_REVIEW)
        .setDescription("backfill known fraud users")
        .setAnalyst("analyst@example.com"))
        .setTime(1456274104243);

ApplyDecisionResponse response;
try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
}

DecisionLog decisionLog = response.getDecisionLog();
---




Rate Limits

Rate limit errors from Sift show up as HTTP 400 or HTTP 429 responses with 
status code 60. The default rate limits are below. If you need higher rate limits, please contact support for assistance on adjusting rate-
limits to the right level.

 Rate Limit (requests/second) for Sift API Events API -  180 requests/second (and a per $user_id rate limit of 3 requests/second)
 Rate Limit (requests/second) for Sift API Events API with synchronous score calls (return_score or return_workflow_status) -  20 requests/second
 Rate Limit (requests/second) for Sift API Decisions API -  40 requests/second
 Rate Limit (requests/second) for Sift API Decisions API w/ applying Block category Decisions -  20 requests/second
 Rate Limit (requests/second) for Sift API JavaScript Snippet -  1000 requests/second
 Rate Limit (requests/second) for Sift API Mobile SDKs -  180 requests/second
 Rate Limit (requests/second) for Sift API Score API -  6 requests/second


Installing the JavaScript Snippet

The JavaScript snippet tracks user interactions with your website and collects device information.
Important: only include the JavaScript snippet when the page is accessed externally by a user of 
your website. If your internal tools offer a way to simulate logging into a user's account, 
for example to investigate a user or place a phone order, it is important that you do not include the JavaScript snippet in those cases so that we do not link your device and 
IP address with the user.
Install the JavaScript Snippet

- To minimize download latency, we've hosted these files on Amazon Cloudfront . 
To minimize page load delay, this code executes as asynchronously as possible, yielding several times.
- This code will set a long-lived cookie (four years) named __ssid on your domain, also known as a 
first-party cookie. We only use this to identify unique visitors. You can optionally set the domain for the 
cookie via another JavaScript parameter _setCookieDomain , _sift.push(['_setCookieDomain','subdomain.foo.com' );]


Mobile SDK Overview

The Sift Mobile SDKs collect and send device information and app life cycle events to Sift.
Broadly, the Mobile SDKs are the analogue to the Sift JavaScript snippet.
Just like the JavaScript snippet allows Sift to collect a range of browser properties
and client-side user actions, the Mobile SDKs allow mobile applications to collect 
and send device properties and application lifecycle events to Sift. These events are
the foundational data that drives machine learning at Sift.
The Mobile SDKs operate at high performance and are designed to be simple, robust
and easy to integrate. Performance optimizations that reduce end-user impact include
batching, compression, deduplication, archiving, and many other techniques detailed
in this blog post .
iOS SDK – Integrate the iOS SDK into your mobile application.
Android SDK – Integrate the Android SDK into your mobile application.


iOS SDK

Installing the library

The SDK can be installed through either CocoaPods or Carthage .
CocoaPods:

- Add this to your Podfile: pod 'Sift' (this uses the latest version).
- Run pod install .
Carthage:

- Add this to your Cartfile: github "SiftScience/sift-ios" (this uses 
the latest version)
- Run carthage update .
Configuration & Set Up:

At a bare minimum, configuring your use of the Sift iOS SDK requires passing in 
your account id and beacon key. Your account id is retrievable by your 
account's admin in your profile section . 
The beacon key is the same key that is used in your Sift JS Snippet, and can be 
found in the developer section . Note 
in particular that this key is not considered secret; a sophisticated bad 
actor could recover this key from your app, or from the JS beacon, and use it 
to submit mobile events.


Android SDK

Installing the library

Add the latest version of the Sift SDK to your application's build.gradle file:



---Curl
dependencies {
  ...
  compile 'com.siftscience:sift-android:VERSION'
  ...
}
---


If your application uses Google Play Services, you will need to configure your build.gradle file to fix its dependency version:



---Curl
compile 'com.google.android.gms:play-services-location:YOUR_GMS_VERSION'
---


You may also need to add the following packagingOptions to the 
main android block:



---Curl
android {
  ...
  packagingOptions {
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/dependencies.txt'
    exclude 'META-INF/LGPL2.1'
  }
  ...
}

---


Integration

There are two different integration paths to take for incorporating Sift into your 
application.
The first one will be detailed below in the Application Integration section. Follow these instructions if your application flow is primarily based on
Activities.
If your application flow is based on a combination of Activities and Fragments, 
please refer to the Custom Integration section.
Application Integration

Add Sift to your Application file
Create an Application file if you haven’t already. Create an internal class that implements 
the ActivityLifecycleCallbacks interface and register Sift as shown below:



---Curl
import siftscience.android.Sift;

public class App extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacksHandler());
    }

    private static final class ActivityLifecycleCallbacksHandler
            implements ActivityLifecycleCallbacks {
        public void onActivityCreated(Activity activity, Bundle bundle) {
            Sift.open(activity, new Sift.Config.Builder()
                .withAccountId("YOUR_ACCOUNT_ID")
                .withBeaconKey("YOUR_BEACON_KEY")
                // Uncomment to disallow location collection
                // .withDisallowLocationCollection(true)
                .build());
            Sift.collect();
        }
        public void onActivityPaused(Activity activity) {
            Sift.pause();
        }
        public void onActivityResumed(Activity activity) {
            Sift.resume(activity);
        }
        public void onActivityDestroyed(Activity activity) {
            Sift.close();
        }
    }
}
---


Set the user ID
As soon as your application is aware of the user ID, set it on the Sift instance using 
the code below. All subsequent events will be associated with that user ID.



---Curl
Sift.setUserId("SOME_USER_ID");
---


If the user logs out of your application or their session ends, you should unset the 
user ID:



---Curl
Sift.unsetUserId();
---


Custom Integration

Initialize Sift in your main Activity
Configure the Sift object in the onCreate method of your application's main Activity 
(the one that begins the application). If the user ID is known at this point, you 
can set it here. Otherwise, you should set it as soon as it is known. In the main Activity, 
also override onPause , onResume , and onDestroy as shown:



---Curl
import siftscience.android.Sift;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hello_sift);
        Sift.open(this, new Sift.Config.Builder()
            .withAccountId("YOUR_ACCOUNT_ID")
            .withBeaconKey("YOUR_BEACON_KEY")
            // Uncomment to disallow location collection
            // .withDisallowLocationCollection(true)
            .build());
        Sift.collect();
    }
    @Override
    protected void onPause() {
        super.onPause();
        Sift.pause();
    }
    @Override
    protected void onResume() {
        super.onResume();
        Sift.resume(this);
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        Sift.close();
    }
}
---


Add Sift to your application flow
For each Activity or Fragment that represents a unique page in your application 
flow, override onStart , onPause , onResume , and onDestroy :



---Curl
public class OtherActivity extends AppCompatActivity {
    @Override
    protected void onStart(Bundle savedInstanceState) {
        super.onStart();
        Sift.open(this);
        // For Fragments, use Sift.open(this.getActivity()) instead
        Sift.collect();
    }
    @Override
    protected void onPause() {
        super.onPause();
        Sift.save();
    }
    @Override
    protected void onResume() {
        super.onResume();
        // For Fragments, use Sift.open(this.getActivity()) instead
        Sift.resume(this);
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        Sift.close();
    }
}
---


Set the user ID
As soon as your application is aware of the user ID, set it on the Sift instance using 
the code below. All subsequent events will be associated with that user ID.



---Curl
Sift.setUserId("SOME_USER_ID");
---


If the user logs out of your application or their session ends, you should unset the 
user ID:



---Curl
Sift.unsetUserId();
---




Events API Reference

Use the Events API to record the core actions users take in your application. The more detail 
we capture about user behaviors, the better we can distinguish between fraudulent and legitimate events. 
We have two types of events:
- Reserved events are events are sent in a standard format, allowing us to do lots of advanced analysis 
on the values sent. When possible, model the actions users take on your site or app with reserved events.
- Custom events are events you create to capture actions unique to your application. If there are key 
actions most of your users take that are not captured by our reserved events, send these as custom event.
Each event has fields that provide details.
- Each event accepts required, reserved, and custom fields .
- Some fields are of type object or object list .
Events API Endpoint

Sift's Events API accepts event data as a JSON request body via a HTTP POST request at 
this endpoint:
https://api.sift.com/v205/events
Every event must contain your $api_key , the event $type , and a $user_id (if this is not 
available, you can alternatively provide a $session_id ). Make sure to look at our error codes .

Note

To receive information whether the event is a bot activity, send the parameter fields=bot_detection in the above request url. Bot Management should be enabled to receive bot related information.



$add_item_to_cart

Use $add_item_to_cart to record when a user adds an item to their shopping cart or list.

 $type -  required · String "$add_item_to_cart"
 $api_key -  required · String Your Sift REST API key.
 $session_id -  required if no User ID is provided · String The user's current session ID, used to tie a user's action before and after log in or account creation.
 $user_id -  send if known · String The user's account ID according to your systems. Note: User IDs are case sensitive .
Find valid $user_id values here .
 $item -  Item The product item added to cart.
Required subfields are $item_id , $product_title , and $price . The $quantity is specified as a subfield.
 $browser -  Browser The user agent of the browser that is used to add the item to cart. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to add the item to cart. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$add_promotion

Use $add_promotion to record when a user adds one or more promotions to their account.

 $type -  required · String "$add_promotion"
 $user_id -  required · String The user's account ID according to your systems. Note: User IDs are case sensitive .
Find valid $user_id values here .
 $promotions -  Array of Promotions Contains all promotions that have been newly applied to the referenced user.
 $browser -  Browser The user agent of the browser that is used to add the promotion. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to add the promotion. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$chargeback

Use $chargeback to capture a chargeback reported on a transaction. This event can be called
multiple times to record changes to the chargeback state.
Note: When you send a $chargeback event you also need to send a Decision event with a source of CHARGEBACK if you want
 to prevent the user from making another purchase. It is recommended that you send both $order_id and $transaction_id to
link the chargeback to the associated user and order. However, only one of those fields is required to be sent in the call
(i.e. if $order_id is present, $transaction_id need not be sent and vice versa).

 $type -  required · String "$chargeback"
 $api_key -  required · String Your Sift REST API key.
 $order_id -  required · String The ID for the order that this chargeback is filed against. Note: Optional if the $transaction_id is present. This field is not required if this chargeback
was filed against a transaction with no $order_id .
 $transaction_id -  required · String The ID for the transaction that this chargeback is filed against. Note: Optional if $order_id is present.
 $user_id -  String The user's account ID according to your systems. Recommended for better chargeback matching.
Note that user IDs are case sensitive .
Find valid $user_id values here .
 $chargeback_state -  String The current state of the chargeback. Allowed Values
- "$received"  "$accepted"  "$disputed"  "$won"  "$lost"
 $chargeback_reason -  String This field can be used to capture the reason given. Allowed Values
- "$fraud"  "$duplicate"  "$product_not_received"  "$product_unacceptable"  "$other"  "$authorization"  "$consumer_disputes"  "$processing_errors"  "$cancel_subscription"  "$friendly_fraud"  "$ach_return"  "$ach_reversal"
 $merchant_profile -  Merchant Profile The details about the merchant or seller providing the goods or service.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .
 $ach_return_code -  String The code returned, as defined by NACHA, which identifies the reason for return. Standard format begins with 'R' followed by a two digit number.


$content_status

Use $content_status to update the status of content that you’ve already sent to Sift.
If the status is the only thing that’s changing about the content, use this as a convenient way to change it
without having to resend the rest of the content's information. Useful for long lived content such as rentals,
dating profiles, and job postings. Status can also be set using $create_content or $update_content .

 $type -  required · String "$content_status"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID for the piece of content that you’re updating the status of. Note: content
IDs are case sensitive .
 $status -  required · String The status of the posting. Allowed Values
- $draft The posting has not yet been submitted by the user to go live.
- $pending The user has submitted the posting but has not gone live. This may be because the posting needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The posting is live and active on your site. Other users can see the posting.
- $paused The posting has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The posting has been deleted or archived by the user.
- $deleted_by_company The posting has been deleted or archived by your company due to violation of terms of service or other
policies.
 $browser -  Browser The user agent of the browser that is used to add the item to cart. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to add the item to cart. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$create_account

Use $create_account to capture user details at account creation. To capture updates to
an account after it is initially created, use $update_account .

 $type -  required · String "$create_account"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $session_id -  String The user's current session ID, used to tie a user's action before and after log in or account creation.
 $user_email -  String Email of the user creating the account. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $name -  String The full name of the user.
 $phone -  String The primary phone number of the user associated with this account. Provide the phone number as a string
starting with the country code. Use E.164 format or send
in the standard national format of number's origin. For example: "+14155556041" or "1-415-555-6041" for a
U.S. number. If you collect other phone numbers for the account, provide them as additional custom fields,
e.g work_phone
 $referrer_user_id -  String The ID of the user that referred the current user to your business. This field is required for detecting referral fraud. Note: User IDs are case sensitive . You
may need to normalize the capitalization of your user IDs. Follow our guidelines for $user_id values.
 $payment_methods -  Array of Payment Methods The payment method(s) associated with this account.
 $billing_address -  Address The billing address associated with this user.
 $shipping_address -  Address The shipping address associated with this user.
 $promotions -  Array of Promotions The list of promotions that apply to this account. You can add one or more promotions when creating
or updating the account. It is particularly useful to add the promotion with this event if the
account is receiving some referral incentive.
You can also separately add promotions to the account via the $add_promotion event.
 $social_sign_on_type -  String If the user logged in with a social identify provider, give the name here. Allowed Values
- $facebook $google $linkedin $twitter $yahoo $microsoft $amazon $apple $wechat $github $other
 $browser -  Browser The user agent of the browser that is used to create the account. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the account. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $account_types -  Array of Strings Capture the type(s) of the account: "merchant" or "shopper" , "regular" or "premium" , etc.
The array supports multiple types for a single account, e.g. ["merchant", "premium"] .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $merchant_profile -  Merchant Profile The details about the merchant or seller providing the goods or service.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$create_content

Use $create_content to tell Sift whenever a user creates content on your site or app.
 Examples of user-generated content include job listings, products for sale, apartment rentals, dating profiles, and blog posts. With every $create_content request, you must specify the type of content you are sending.
 Sift supports the following types of content:


$create_content.comment

Use $create_content with a $comment type to tell Sift whenever a user posts
 into the comment section your site. Examples of comments include a comment on a social media or blog post,
 and discussion sections on news articles.

 $type -  required · String "$create_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
 Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
 Note: content IDs are case sensitive and must be unique across all content types..
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the comment. After you update a posting, you can also update its status via the $content_status event. Allowed Values
- $draft The comment has not yet been submitted by the user to go live.
- $pending The user has submitted the comment but has not gone live. This may be because the comment needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The comment is live and active on your site. Other users can see the posting.
- $paused The comment has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The comment has been deleted or archived by the user.
- $deleted_by_company The comment has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to create the comment. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the comment. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $comment -  Object Contains information about the comment.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $comment $body -  String The text content of the comment.
 $comment $contact_email -  String The email address provided with the listing for contacting the poster. When no email address is
provided for the listing, use the email address of the user account instead.
 $comment $parent_comment_id -  String The $content_id of the immediate parent comment, i.e. the comment being replied to.
Only use if it is a reply to a previous comment.
 $comment $root_content_id -  String The $content_id of the content being commented on. For example,
 this would be the id of the social media $post to which the comment applies.
 $comment $images -  Array of Images The list of images shared by the user with their comment. It includes images pasted inline or attached
separately.


$create_content.listing

Use $create_content with a $listing type whenever a user creates a listing on your site.
Examples of listings include job listing, product for sale, or an apartment for rent.

 $type -  required · String "$create_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types..
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the listing. After you update a listing, you can also update its status via the $content_status event. Allowed Values
- $draft The listing has not yet been submitted by the user to go live.
- $pending The user has submitted the listing but has not gone live. This may be because the listing needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The listing is live and active on your site. Other users can see the posting.
- $paused The listing has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The listing has been deleted or archived by the user.
- $deleted_by_company The listing has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to create the listing. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the listing. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $listing -  Object Contains information about the listing.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $listing $subject -  String The subject of the listing.
 $listing $body -  String The text content of the listing.
 $listing $contact_email -  String The email address provided with the listing for contacting the poster. When no email address is
 provided for the listing, use the email address of the user account instead.
 $listing $contact_address -  Address The physical contact address provided with the listing. When no address is provided for the listing,
 use the physical address of the user account instead.
 $listing $locations -  Array of Addresses The locations associated with the listing. For example, this array would contain the location of the
 rental listing. You can pass one or more addresses that are associated with your listing.
 Pass as much information as you have. Partial addresses such as just the city and state are fine
 if that's all you have.
 $listing $listed_items -  Array of Items The items array represents physical or digital items listed by the user.
 $listing $images -  Array of Images The list of images shared by the user with their listing. It includes images pasted inline or attached
 separately.
 $listing $expiration_time -  Integer The UNIX timestamp in milliseconds of when the listing will expire. Only set if the listing is time
 bound in some way (e.g. car auction will close 14 days from date of posting).


$create_content.message

Use $create_content with a $message type to represent a message exchanged between users of your service.

 $type -  required · String "$create_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
 Note: content IDs are case sensitive and must be unique across all content types..
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the posting. After you create a message, you can also update its status via the $content_status event. Allowed Values
- $draft The message has not yet been submitted by the user to go live.
- $pending The user has submitted the message but has not gone live. This may be because the message needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The message is live and active on your site. Other users can see the message.
- $paused The message has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The message has been deleted or archived by the user.
- $deleted_by_company The message has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to create the message. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the message. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $message -  Object Contains information about the message.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $message $subject -  String The user-supplied subject of the message.
 $message $body -  String The text content of the message.
 $message $contact_email -  String The email address provided with the listing for contacting the poster. When no email address is
 provided for the listing, use the email address of the user account instead.
 $message $root_content_id -  String The content_id in the context of which the messages is sent. For example, this would
 be the job listing being responded to.
 $message $recipient_user_ids -  Array of Strings The user_ids of the recipients of the message.
 $message $images -  Array of Images The list of images shared by the user with their message. It includes images pasted inline or attached
 separately.


$create_content.post

Use $create_content with a $post type to represent information a user has shared with your community.
Examples include social media posts like status updates, forum posts, blog articles, etc.

 $type -  required · String "$create_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
 Note: content IDs are case sensitive and must be unique across all content types..
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the posting. After you create a posting, you can also update its status via the $content_status event. Allowed Values
- $draft The post has not yet been submitted by the user to go live.
- $pending The user has submitted the post but has not gone live. This may be because the post needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The post is live and active on your site. Other users can see the post.
- $paused The post has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The post has been deleted or archived by the user.
- $deleted_by_company The post has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to create the post. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the post. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $post -  Object Contains information about the post.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $post $subject -  String The user-supplied subject of the post.
 $post $body -  String The text content of the post.
 $post $contact_email -  String The email address provided with the post for contacting the poster. When no email address is
 provided for the listing, use the email address of the user account instead.
 $post $contact_address -  Address The physical contact address provided with the post. When no address is provided for the post,
 use the physical address of the user account instead.
 $post $locations -  Array of Addresses The locations associated with the post. In the example above, the locations array contains
 the check-in location of a social-media post.
 You can pass one or more addresses that are associated with your post.
 Pass as much information as you have. Partial addresses such as just the city and state are fine if that's all you have.
 $post $categories -  Array of Strings The category or categories you associate with the posting. For example, a blog post might be
 categorized as ["Family", "Travel"] .
 $post $images -  Array of Images The list of images shared by the user with their post. It includes images pasted inline or attached
 separately.
 $post $expiration_time -  Integer The UNIX timestamp in milliseconds of when the post will expire. Only set if the post is time
 bound in some way.


$create_content.profile

Use $create_content with a $profile type to represent information related to a user's profile.
This may include a social media profile, dating profile, etc.

 $type -  required · String "$create_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the profile. After you create a profile, you can also update its status via the $content_status event. Allowed Values
- $draft The profile has not yet been submitted by the user to go live.
- $pending The user has submitted the profile but has not gone live. This may be because the profile needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The profile is live and active on your site. Other users can see the profile.
- $paused The profile has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The profile has been deleted or archived by the user.
- $deleted_by_company The profile has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to create the profile. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the profile. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $profile -  Object Contains information about the profile.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $profile $body -  String The text content of the profile.
 $profile $contact_email -  String The email address provided with the profile for contacting the user. When no email address is
 provided for the listing, use the email address of the user account instead.
 $profile $contact_address -  Address The physical contact address provided with the profile. When no address is provided for the profile,
 use the physical address of the user account instead.
 $profile $images -  Array of Images The list of images shared by the user with their profile. It includes images pasted inline or attached
 separately.
 $profile $categories -  Array of Strings The category or categories you associate with the profile. For example, a profile on a services
 marketplace might be categorized as ["Photographer", "Weddings"] .


$create_content.review

Use $create_content with a $review type to represent information related to a product or service review
submitted by your users.

 $type -  required · String "$create_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the review. After you create a review, you can also update its status via the $content_status event. Allowed Values
- $draft The review has not yet been submitted by the user to go live.
- $pending The user has submitted the review but has not gone live. This may be because the review needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The review is live and active on your site. Other users can see the review.
- $paused The review has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The review has been deleted or archived by the user.
- $deleted_by_company The review has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to create the review. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the review. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $review -  Object Contains information about the review.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $review $subject -  String The user-supplied title of the review.
 $review $body -  String The text content of the review.
 $review $contact_email -  String The email address provided with the review for contacting the reviewer. When no email address is
 provided for the listing, use the email address of the user account instead.
 $review $locations -  Array of Addresses The locations associated with the review. In the example above, the location of the restaurant being reviewed.
 You can pass one or more addresses that are associated with your review.
 Pass as much information as you have. Partial addresses such as just the city and state are fine if that's all you have.
 $review $item_reviewed -  Item An Item object representing the item being reviewed.
 $review $reviewed_content_id -  String The $content_id of the item being reviewed. For example, this could be the id for the $listing or $profile being reviewed.
 $review $rating -  Float A numeric rating supplied by the reviewer.
 $review $images -  Array of Images The list of images shared by the user with their review. It includes images pasted inline or attached
 separately.


$create_order

Use $create_order to record when a user submits an order for products or services they intend to purchase.
This API event should contain the products/services ordered, the payment instrument(s), and user identification data.

 $type -  required · String "$create_order"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation. Required if no $user_id values is provided.
 $order_id -  String The ID for tracking this order in your system.
 $user_email -  String Email of the user creating this order. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $amount -  Integer Total transaction amount in micros in the base unit of the $currency_code . 1 cent = 10,000
micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of fractional
denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount.
If your site uses alternative currencies, specify them here.
 $billing_address -  Address The billing address as entered by the user.
 $payment_methods -  Array of Payment Methods The payment information associated with this order. Note: As opposed to $transaction , $create_order takes an array of $payment_method objects, so you can record orders that are paid for using multiple payments.
See Payment Method under Complex Field Types for more details.
 $shipping_address -  Address The shipping address as entered by the user.
 $expedited_shipping -  Boolean Whether the user requested priority/expedited shipping on their order.
 $items -  Array of Items The list of items ordered. This may include physical products, gift cards, in-app purchases etc.
Travel (Flights, Hotels, Rideshare, etc) and Event Ticketing customers should use $bookings instead of $items . $bookings supports specialized fields for modeling specific to Travel, Ticketing, and other cases
where users make bookings.
Note: cannot be used in conjunction with $bookings or $digital_orders .
 $bookings -  Array of Bookings The list of bookings made. This may include tickets and reservations like flights, hotels, rideshares etc.
Note: cannot be used in conjunction with $items or $digital_orders .
 $seller_user_id -  String For marketplace businesses, this is the seller's user ID, typically a database primary key.
Follow our guidelines for $user_id values.
 $promotions -  Array of Promotions The list of promotions that apply to this order. You can add one or more promotions when creating or
updating an order. You can also separately add promotions to the account via the $add_promotion event.
 $shipping_method -  String Indicates the method of delivery to the user. Allowed Values
- "$electronic" "$physical"
 $shipping_carrier -  String Shipping carrier for the shipment of the product.
 $shipping_tracking_number -  deprecated · String Shipping tracking number for the shipment of the product.
 $shipping_tracking_numbers -  Array of Strings Shipping tracking number(s) for the shipment of the product(s).
 $ordered_from -  Ordered From The details about the specific physical location providing the good or service. This can also be used to
capture pickup, delivery locations, etc.
 $browser -  Browser The user agent of the browser that is used to create the order. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the order. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $merchant_profile -  Merchant Profile The details about the merchant or seller providing the goods or service.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .
 $digital_orders -  Array of Digital Orders The list of digital orders made. A digital order represents a digital asset which can be part of
a cryptocurrency or digital asset transaction. Note: cannot be used in conjunction with $items or $bookings .


$flag_content

Use $flag_content to let us know when a user reports content that may violate your
 company’s policies. If you have a feature like "Report this post" or "Flag this profile", send that event to
 Sift using this reserved event.

 $type -  required · String "$flag_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The content creator's account ID according to your systems. Note: User IDs are case sensitive .
Find valid $user_id values here .
 $content_id -  required · String The unique ID for the piece of content that is being flagged. Note: content IDs are case sensitive .
 $flagged_by -  String The account ID of the user who is flagging the content. Note: User IDs are case sensitive .
 $reason -  String The reason provided by the flagger. Allowed Values
- $toxic Foul language, harassment, hate speech or bullying. Example: Comments which contain hateful language.
- $irrelevant The content doesn't relate to the topic of discussion.
- $commercial Commercial solicitations which are against your terms of service.
For example, sending private messages to users to sell goods or services.
- $phishing Generally, taking user off your site to obtain sensitive information.
- $private The content includes private information (like contact or identity information) that should not be shared.
- $scam The content is created to perpetrate a scam. For example, listings where the scammer will
never ship the product. Or profiles for romance scammers.
- $copyright Sharing any type of copyrighted content.
- $other Anything that doesn't fit in the above reasons.
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$link_session_to_user

Use $link_session_to_user to associate data from a specific session to a user. Generally used only in
anonymous checkout workflows.

 $type -  required · String "$link_session_to_user"
 $api_key -  required · String Your Sift REST API key.
 $session_id -  required · String The user's current session ID, used to associate Javascript page events with their REST API counterparts.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$login

Use $login to record when a user attempts to log in.

 $type -  required · String "$login"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $session_id -  String The user's current session ID, used to tie a user's action before and after log in or account creation.
NOTE: this is required if no $user_id is provided.
 $login_status -  String Use $login_status to represent the success or failure of the login attempt. Allowed Values
- "$success"  "$failure"
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $ip -  String IP address of the user that is logging in.
 $browser -  Browser The user agent of the browser that is logging in. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is logging in. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $failure_reason -  String Capture the reason for the failure of the login. Allowed Values
- $account_unknown Username never existed on this site.
- $account_suspended Username exists, but the account is locked or temporarily deactivated.
- $account_disabled Username exists, account was closed or permanently deactivated.
- $wrong_password Username exists, but the password is incorrect for this user.
 $username -  String The username entered at the login prompt.
 $social_sign_on_type -  String If the user logged in with a social identify provider, give the name here. Allowed Values
- $facebook $google $linkedin $twitter $yahoo $microsoft $amazon $apple $github $other
 $account_types -  Array of Strings Capture the type(s) of the account: "merchant" or "shopper" , "regular" or "premium" , etc.
The array supports multiple types for a single account, e.g. ["merchant", "premium"] .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$logout

Use $logout to record when a user logs out.

 $type -  required · String "$logout"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $browser -  Browser The user agent of the browser that is used to logout. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to logout. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$order_status

Use $order_status to track the order processing workflow of a previously submitted order. For
example, $order_status can be used to indicate that an order has been held for review, canceled due
to suspected fraud, or fulfilled.  This event can be called multiple times to record changes an order's status.

 $type -  required · String "$order_status"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $order_id -  required · String The ID for tracking this order in your system.
 $order_status -  required · String Indicates the high-level state of the order. Allowed Values
- "$approved"  "$canceled"  "$held"  "$fulfilled"  "$returned"
 $reason -  String The reason for a cancellation. Allowed Values
- "$payment_risk"  "$abuse"  "$policy"  "$other"
 $source -  String The source of a decision. Allowed Values
- "$automated"  "$manual_review"
 $analyst -  String The analyst who made the decision, if manual.
 $webhook_id -  String An alternative to using $source and $analyst , this is the ID of the Sift
Action webhook that triggered the status change.
 $description -  String Any additional information about this order status change.
 $browser -  Browser The user agent of the browser that is used to add the item to cart. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to add the item to cart. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$remove_item_from_cart

Use $remove_item_from_cart to record when a user removes an item from their shopping cart or list.

 $type -  required · String "$remove_item_to_cart"
 $api_key -  required · String Your Sift REST API key.
 $session_id -  required if no User ID is provided · String The user's current session ID, used to tie a user's action before and after log in or account creation.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $item -  Item The product item removed from cart.
Strongly recommended subfields are $item_id , $product_title , and $price . The $quantity is specified as a subfield.
 $browser -  Browser The user agent of the browser that is used to remove the item from cart. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to remove the item from cart. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$security_notification

When you identify suspicious activity on a user account, you may want to notify the user of this activity.
For example, a login may seem suspicious because the login attempt was made from a new device.
You may choose to inform the user that this incident happened. Ideally, these notifications should
contain a summary of the activity and also have a response mechanism where the user may confirm or
deny if the suspicious activity was them. The $security_notification event is used to capture this
lifecycle of issuing the notification and the user response.

 $type -  required · String "$security_notification"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $session_id -  Required · String The user's current session ID, used to tie a user's action before and after log in or account creation.
 $notification_type -  String/Enum The type of notification issued. Allowed Values
- $email The notification was sent via email.
- $sms The notification was sent via sms.
- $push The notification was sent as a push notification via your mobile app.
 $notified_value -  String The phone number (e.g. 14155551212, 442072193000) or email address (e.g. bob@example.com) to which the notification was sent.
This value should be passed when the $notification_type is set to $sms or $email .
 $notification_status -  required · String/Enum The status of the notification event: records the follow-up action taken by the notified user. Allowed Values
- $sent The notification was sent to your user but no action has been taken by the user in response
- $safe The user has reported that the suspicious activity was performed by the user themselves
- $compromised The user has reported that the suspicious activity was an unknown third-party
 $browser -  Browser The user agent of the browser that is used to add the item to cart. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to add the item to cart. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$transaction

Use $transaction to record attempts to exchange money, credit or other tokens of value.

 $type -  required · String "$transaction"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $user_email -  String Email of the user creating this order. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $transaction_type -  String The type of transaction being recorded. There are eight types: Allowed Values
- $sale Authorization and capture of a payment performed together in one step. This is the most commonly used transaction type. This is the default $transaction_type if the transaction type is not provided.
- $authorize Authorizing a payment by reserving the payment amount from the buyer's
account. Money does not change hands until capture.
- $capture Capturing a payment reserved in the authorization step.
- $void Cancelling a pending authorization or capture.
- $refund Returning part or all of a captured payment to the buyer.
- $deposit Depositing money into an account.
- $withdrawal Withdrawing money from an account.
- $transfer Transferring money from one account to another.
- $buy Acquisition of an asset, for example the purchase of cryptocurrency.
- $sell Disposal of an underlying asset, for example the sale of cryptocurrency.
- $send Represents the movement of assets or funds between different wallets, exchanges, or accounts. For example, sending funds through remittance services.
- $receive Represents the movement of assets or funds between different wallets, exchanges, or accounts. For example, receiving funds through remittance services.
 $transaction_status -  String Use $transaction_status to indicate the status of the transaction. The value can be "$success" (default value), "$failure" or "$pending" . For instance, If
the transaction was rejected by the payment gateway, set the value to "$failure" .
 $amount -  Required · Integer Total transaction amount in micros in the base unit of the $currency_code . 1 cent = 10,000
micros. $1.23 USD = 123 cents = 1,230,000 micros. Send as a positive number for all $transaction_type values. For currencies without cents of fractional
denominations, like the Japanese Yen, use 1 JPY = 1000000 micros. Use 1 for 1 microBitcoin.
 $currency_code -  Required · String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD, BTC.
 $order_id -  String The ID for this order in your system. Used for cross referencing an order in your internal systems.
 $transaction_id -  String The ID for identifying this transaction. Important for tracking transactions, and linking
different parts of the same transaction together, e.g. , linking a refund to its original
transaction.
 $billing_address -  Address The billing address as entered by the user.
 $payment_method -  Payment Method Object The payment information associated with this transaction.
 $shipping_address -  Address The shipping address as entered by the user.
 $session_id -  String The user's current session ID, used to tie a user's action before and after log in or account creation.
 $seller_user_id -  String For marketplace businesses, this is the seller's user ID, typically a database primary key.
Follow our guidelines for $user_id values.
 $transfer_recipient_user_id -  String For transfer transactions, the user ID of the user receiving the transfer.
If $transfer_recipient_user_id is specified, $transaction_type must be set to "$transfer" ; otherwise, the system will give an error.
Follow our guidelines for $user_id values.
 $decline_category -  String Use $decline_category to indicate the category of a transaction decline sent by the PSP.  Please note: Only send this field when $transaction_status is $failure . Sending for transactions with $transaction_status $success , $pending or empty will result in error.  This field trains the model on decline reasons across PSPs, helping Sift catch card testing and traditional payments fraud. Allowed Values
- $fraud  $lost_or_stolen  $risky  $bank_decline  $invalid  $expired  $insufficient_funds  $limit_exceeded  $additional_verification_required  $invalid_verification  $other For more explanation and a mapping for major PSPs, visit the $decline_category Guide .
 $ordered_from -  Ordered From The details about the specific physical location providing the good or service. This can also be used to
capture pickup, delivery locations, etc.
 $browser -  Browser The user agent of the browser that is used to create the transaction. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to create the transaction. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $status_3ds -  String Use the following allowed values to indicate the status of a 3DS request. Allowed Values
- "$successful"  "$attempted"  "$failed"  "$unavailable"  "$rejected"
 $triggered_3ds -  String Use $processor to reflect a challenge initiated by the processor.
Use $merchant to indicate if the challenge was recommended by Sift via a workflow or a manual review.
 $merchant_initiated_transaction -  Boolean Use true or false to indicate if this is a recurring payment for the same amount to the same merchant (recurring payments are considered out of scope for SCA).
 $merchant_profile -  Merchant Profile The details about the merchant or seller providing the goods or service.
 $sent_address -  Address The address to the specific physical location of the person sending a transaction.
 $received_address -  Address The address to the specific physical location of the person receiving a transaction.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .
 $digital_orders -  Array of Digital Orders The list of digital orders made. A digital order represents a digital asset which can be part of
a cryptocurrency or digital asset transaction.
 $receiver_wallet_address -  String The wallet ID or address of the person receiving a crypto payment.
 $receiver_external_address -  Boolean Use true or false to indicate if the recipient is on an external platform.


$update_account

Use $update_account to record changes to the user's account 
information. For user accounts created prior to integrating with Sift, it's 
recommended that $create_account is called before $update_account to enable Sift to track the account's age. Otherwise, call $update_account and 
we'll infer that account was created before integration.

 $type -  required · String "$update_account"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $changed_password -  Boolean Track password changes via $update_password . If the user changed their password, set this field and mark as true . Additionally, 
Sift's recommended approach is to send the $update_password reserved event.
 $user_email -  String Updated value of the user's email address. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $name -  String The full name of the user.
 $phone -  String The primary phone number of the user associated with this account. Provide the phone number as a string
starting with the country code. Use E.164 format or send
in the standard national format of number's origin. For example: "+14155556041" or "1-415-555-6041" for a
U.S. number. If you collect other phone numbers for the account, provide them as additional custom fields,
e.g work_phone
 $referrer_user_id -  String The ID of the user that referred the current user to your business. This field is required for
detecting referral fraud. Note: User IDs are case sensitive . You may need to normalize the
capitalization of your user IDs. Follow our guidelines for $user_id values.
 $payment_methods -  Array of Payment Methods The payment method(s) associated with this account.
If possible, please send all payment methods associated with the account each time payment methods are updated.
 $billing_address -  Address The updated billing address.
 $shipping_address -  Address The shipping address associated with this user.
 $social_sign_on_type -  String If the user logged in with a social identify provider, give the name here. Allowed Values
- $facebook $google $linkedin $twitter $yahoo $microsoft $amazon $apple $github $other
 $browser -  Browser The user agent of the browser that is used to update the account. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the account. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $account_types -  Array of Strings Capture the type(s) of the account: "merchant" or "shopper" , "regular" or "premium" , etc.
The array supports multiple types for a single account, e.g. ["merchant", "premium"] .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $merchant_profile -  Merchant Profile The details about the merchant or seller providing the goods or service.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$update_content

Use $update_content to record changes to a content created previously with a $create_content event.
- This event contains the same fields as $create_content .
- The existing content will be completely replaced by the values specified in $update_content . Be sure
to specify all values for the content, not just those that changed.
- For content created prior to integrating with Sift, there's no need to call $create_content before $update_content . Simply call $update_content and we'll infer that the content was created before
your integration with Sift.


$update_content.comment

Use $update_content with a $comment type to tell Sift whenever a user posts
into the comment section your site. Examples of comments include a comment on a social media or blog post,
and discussion sections on news articles.

 $type -  required · String "$update_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the comment. After you update a posting, you can also update its status via the $content_status event. Allowed Values
- $draft The comment has not yet been submitted by the user to go live.
- $pending The user has submitted the comment but has not gone live. This may be because the comment needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The comment is live and active on your site. Other users can see the posting.
- $paused The comment has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The comment has been deleted or archived by the user.
- $deleted_by_company The comment has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
with mobile apps.
 $browser -  Browser The user agent of the browser that is used to update the comment. Represented by the $browser object.
Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the comment. Represented by the $app object.
Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $comment -  Object Contains information about the comment.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $comment $body -  String The text content of the comment.
 $comment $contact_email -  String The email address provided with the listing for contacting the poster. When no email address is
provided for the listing, use the email address of the user account instead.
 $comment $parent_comment_id -  String The $content_id of the immediate parent comment, i.e. the comment being replied to.
Only use if it is a reply to a previous comment.
 $comment $root_content_id -  String The $content_id of the content being commented on. For example,
this would be the id of the social media $post to which the comment applies.
 $comment $images -  Array of Images The list of images shared by the user with their comment. It includes images pasted inline or attached
separately.


$update_content.listing

Use $update_content with a $listing type whenever a user updates a listing on your site.
Examples of listings include job listing, product for sale, or an apartment for rent.

 $type -  required · String "$update_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the listing. After you update a listing, you can also update its status via the $content_status event. Allowed Values
- $draft The listing has not yet been submitted by the user to go live.
- $pending The user has submitted the listing but has not gone live. This may be because the listing needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The listing is live and active on your site. Other users can see the posting.
- $paused The listing has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The listing has been deleted or archived by the user.
- $deleted_by_company The listing has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to update the listing. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the listing. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $listing -  Object Contains information about the listing.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $listing $subject -  String The subject of the listing.
 $listing $body -  String The text content of the listing.
 $listing $contact_email -  String The email address provided with the listing for contacting the poster. When no email address is
 provided for the listing, use the email address of the user account instead.
 $listing $contact_address -  Address The physical contact address provided with the listing. When no address is provided for the listing,
 use the physical address of the user account instead.
 $listing $locations -  Array of Addresses The locations associated with the listing. For example, this array would contain the location of the
 rental listing. You can pass one or more addresses that are associated with your listing.
 Pass as much information as you have. Partial addresses such as just the city and state are fine if that's all you have.
 $listing $listed_items -  Array of Items The items array represents physical or digital items listed by the user.
 $listing $images -  Array of Images The list of images shared by the user with their listing. It includes images pasted inline or attached
 separately.
 $listing $expiration_time -  Integer The UNIX timestamp in milliseconds of when the listing will expire. Only set if the listing is time
 bound in some way (e.g. car auction will close 14 days from date of posting).


$update_content.message

Use $update_content with a $message type to represent a message exchanged between users of your service.

 $type -  required · String "$update_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
 Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
 Note: content IDs are case sensitive and must be unique across all content types..
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the posting. After you update a posting, you can also update its status via the $content_status event. Allowed Values
- $draft The message has not yet been submitted by the user to go live.
- $pending The user has submitted the message but has not gone live. This may be because the message needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The message is live and active on your site. Other users can see the message.
- $paused The message has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The message has been deleted or archived by the user.
- $deleted_by_company The message has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to update the message. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the message. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $message -  Object Contains information about the message.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $message $subject -  String The user-supplied subject of the message.
 $message $body -  String The text content of the message.
 $message $contact_email -  String The email address provided with the listing for contacting the poster. When no email address is
 provided for the listing, use the email address of the user account instead.
 $message $root_content_id -  String The content_id in the context of which the messages is sent. For example, this would
 be the job listing being responded to.
 $message $recipient_user_ids -  Array of Strings The user_ids of the recipients of the message.
 $message $images -  Array of Images The list of images shared by the user with their message. It includes images pasted inline or attached
 separately.


$update_content.post

Use $update_content with a $post type to represent information a user has shared with your community.
Examples include social media posts like status updates, forum posts, blog articles, etc.

 $type -  required · String "$update_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the posting. After you update a posting, you can also update its status via the $content_status event. Allowed Values
- $draft The post has not yet been submitted by the user to go live.
- $pending The user has submitted the post but has not gone live. This may be because the post needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The post is live and active on your site. Other users can see the post.
- $paused The post has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The post has been deleted or archived by the user.
- $deleted_by_company The post has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to update the post. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the post. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $post -  Object Contains information about the post.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $post $subject -  String The user-supplied subject of the post.
 $post $body -  String The text content of the post.
 $post $contact_email -  String The email address provided with the post for contacting the poster. When no email address is
 provided for the listing, use the email address of the user account instead.
 $post $contact_address -  Address The physical contact address provided with the post. When no address is provided for the post,
 use the physical address of the user account instead.
 $post $locations -  Array of Addresses The locations associated with the post. In the example above, the locations array contains
 the check-in location of a social-media post.
 You can pass one or more addresses that are associated with your post.
 Pass as much information as you have. Partial addresses such as just the city and state are fine if that's all you have.
 $post $categories -  Array of Strings The category or categories you associate with the posting. For example, a blog post might be
 categorized as ["Family", "Travel"] .
 $post $images -  Array of Images The list of images shared by the user with their post. It includes images pasted inline or attached
 separately.
 $post $expiration_time -  Integer The UNIX timestamp in milliseconds of when the post will expire. Only set if the post is time
 bound in some way.


$update_content.profile

Use $update_content with a $profile type to represent information related to a user's profile.
This may include a social media profile, dating profile, etc.

 $type -  required · String "$update_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the profile. After you update a profile, you can also update its status via the $content_status event. Allowed Values
- $draft The profile has not yet been submitted by the user to go live.
- $pending The user has submitted the profile but has not gone live. This may be because the profile needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The profile is live and active on your site. Other users can see the profile.
- $paused The profile has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The profile has been deleted or archived by the user.
- $deleted_by_company The profile has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to update the profile. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the profile. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $profile -  Object Contains information about the profile.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $profile $body -  String The text content of the profile.
 $profile $contact_email -  String The email address provided with the profile for contacting the user. When no email address is
 provided for the listing, use the email address of the user account instead.
 $profile $contact_address -  Address The physical contact address provided with the profile. When no address is provided for the profile,
 use the physical address of the user account instead.
 $profile $images -  Array of Images The list of images shared by the user with their profile. It includes images pasted inline or attached
 separately.
 $profile $categories -  Array of Strings The category or categories you associate with the profile. For example, a profile on a services
 marketplace might be categorized as ["Photographer", "Weddings"] .


$update_content.review

Use $update_content with a $review type to represent information related to a product or service review
submitted by your users.

 $type -  required · String "$update_content"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's internal account ID. Users without an assigned $user_id will not show up in the console.
Find valid $user_id values here .
 $content_id -  required · String The unique ID that you assign to an individual piece of content in your system.
Note: content IDs are case sensitive and must be unique across all content types.
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation.
 $status -  String The status of the review. After you create a posting, you can also update its status via the $content_status event. Allowed Values
- $draft The review has not yet been submitted by the user to go live.
- $pending The user has submitted the review but has not gone live. This may be because the review needs to be
reviewed, the user needs to add payment details, or because of some other processes within your business.
- $active The review is live and active on your site. Other users can see the review.
- $paused The review has been paused by the user and may return back to $active at a later date.
- $deleted_by_user The review has been deleted or archived by the user.
- $deleted_by_company The review has been deleted or archived by your company due to violation of terms of service or other
policies.
 $ip -  String IP address of the request made by the user. Recommended for historical backfills and customers with
 with mobile apps.
 $browser -  Browser The user agent of the browser that is used to update the review. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the review. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $review -  Object Contains information about the review.
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


 $review $subject -  String The user-supplied title of the review.
 $review $body -  String The text content of the review.
 $review $contact_email -  String The email address provided with the review for contacting the reviewer. When no email address is
 provided for the listing, use the email address of the user account instead.
 $review $locations -  Array of Addresses The locations associated with the review. In the example above, the location
 of the restaurant being reviewed.
 You can pass one or more addresses that are associated with your review.
 Pass as much information as you have. Partial addresses such as just the city and state are fine if that's all you have.
 $review $item_reviewed -  Item An Item object representing the item being reviewed.
 $review $reviewed_content_id -  String The $content_id of the item being reviewed. For example, this could be the id for the $listing or $profile being reviewed.
 $review $rating -  Float A numeric rating supplied by the reviewer.
 $review $images -  Array of Images The list of images shared by the user with their review. It includes images pasted inline or attached
 separately.


$update_order

Use $update_order to record when a user updates an order for products or services they intend to
purchase.
- This event contains the same fields as $create_order .
- The existing order will be completely replaced by the values sent in $update_order . Be sure to specify
all values for the order, not just those that changed.
- If no matching $order_id found, a new order will be created.

 $type -  required · String "$update_order"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $session_id -  String The user's current session ID, used to tie a user's action before and after login or account creation. Required if no $user_id values is provided.
 $order_id -  String The ID for tracking this order in your system.
 $user_email -  String Email of the user creating this order. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $amount -  Integer Total transaction amount in micros in the base unit of the $currency_code . 1 cent = 10,000
micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of fractional
denominations, like the Japanese Yen, use 1 JPY = 1000000 micros and 1 for 1 micro-Bitcoin.
 $currency_code -  String ISO-4217 currency code for the amount.
If your site uses alternative currencies, specify them here.
 $billing_address -  Address The billing address as entered by the user.
 $payment_methods -  Array of Payment Methods The payment information associated with this order.
As opposed to $transaction , $create_order takes an array of $payment_method objects, so you can record orders that are paid for using multiple payments.
 $shipping_address -  Address The shipping address as entered by the user.
 $expedited_shipping -  Boolean Whether the user requested priority/expedited shipping on their order.
 $items -  Array of Items The list of items ordered. This may include physical products, gift cards, in-app purchases etc.
Travel (Flights, Hotels, Rideshare, etc) and Event Ticketing customers should use $bookings instead of $items . $bookings supports specialized fields for modeling specific to Travel, Ticketing, and other cases
where users make bookings.
Note: cannot be used in conjunction with $bookings or $digital_orders .
 $bookings -  Array of Bookings The list of bookings made. This may include tickets and reservations like flights, hotels, rideshares etc.
Note: cannot be used in conjunction with $items or $digital_orders .
 $seller_user_id -  String For marketplace businesses, this is the seller's user ID, typically a database primary key.
Follow our guidelines for $user_id values.
 $promotions -  Array of Promotions The list of promotions that apply to this order. You can add one or more promotions when creating or
updating an order. You can also separately add promotions to the account via the $add_promotion event.
 $shipping_method -  String Indicates the method of delivery to the user. Allowed Values
- "$electronic" "$physical"
 $shipping_carrier -  String Shipping carrier for the shipment of the product.
 $shipping_tracking_number -  deprecated · String Shipping tracking number for the shipment of the product.
 $shipping_tracking_numbers -  Array of Strings Shipping tracking number(s) for the shipment of the product(s).
 $ordered_from -  Ordered From The details about the specific physical location providing the good or service. This can also be used to
capture pickup, delivery locations, etc.
 $browser -  Browser The user agent of the browser that is used to update the order. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the order. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $merchant_profile -  Merchant Profile The details about the merchant or seller providing the goods or service.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .
 $digital_orders -  Array of Digital Orders The list of digital orders made. A digital order represents a digital asset which can be part of
a cryptocurrency or digital asset transaction. Note: cannot be used in conjunction with $items or $bookings .


$update_password

Use $update_password to record all password changes, whether initiated by the user or the service.

 $type -  required · String "$update_password"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $reason -  required · String The reason the password was updated or an update was attempted. The process may trigger a verification (with $verified_event = $update_password ). Allowed Values
- $user_update The user updates the password on their own while logged into the account. The update can be motivated by, e.g., desire to use a stronger password from a password manager or because the password expired after 90 days.
- $forgot_password The user forgot the password and initiates a self-service process to create a new password. The old password becomes invalid only once the process is complete ( $status is $success ).
- $forced_reset The service provider reset the password following suspicious account behavior or a support ticket. The old password becomes invalid once the process is initiated ( $status is $pending ).
 $status -  required · String The status of the password update event. Allowed Values
- $pending Password change initiated, waiting for user to act.
- $success New password was set. This is the only status needed for password updates from within the account ( $reason is $user_update ).
- $failure User clicks an expired password link.
 $browser -  Browser The user agent of the browser that is used to update the password. Represented by the $browser object.
 Use this field if the client is a browser. Note: cannot be used in conjunction with $app .
 $app -  App The details of the app, os, and device that is used to update the password. Represented by the $app object.
 Use this field if the client is an app. Note: cannot be used in conjunction with $browser .
 $brand_name -  String Name of the brand of product or service being purchased.
 $site_country -  String Country the company is providing service from.
Use ISO-3166 country code.
 $site_domain -  String Domain being interfaced with.
Use fully qualified domain name .
 $user_email -  String Email of the user logging in. Note: If the user's email is also their account ID in your
system, set both the $user_id and $user_email fields to their
email address.
 $verification_phone_number -  String Phone number of the user. This phone number will be used to send One-Time Password (OTP) when required.
The phone number should be in E.164 format including + and a country code.
 $keyless_user_id -  String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


$verification

When a user attempts a high-value activity (e.g., login, view or change account 
information) that you deem risky, you may decide to verify whether the user is who 
they say they are. This is typically done by asking the user to enter a one-time passcode
that is sent to their email, phone, or app. Other supported methods are detailed below. 
Sift models this interaction with the $verification event.

 $type -  required · String "$verification"
 $api_key -  required · String Your Sift REST API key.
 $user_id -  required · String The user's account ID according to your systems. Note that user IDs are case sensitive .
Find valid $user_id values here .
 $session_id -  required · String The user's current session ID, used to tie a user's action before and after log in or account creation.
 $status -  required · String The status of the verification event. Allowed Values
- $pending Verification has been sent to your customer but the customer has not attempted to perform the verification attempt.
- $success Your customer has attempted and passed the verification process.
- $failure Your customer has attempted and failed the verification process.
 $browser -  Browser The user agent of the browser that is verifying. Represented by the $browser object. Use this field if the client is a browser. Note: cannot be used in conjunction with $app.
 $app -  App The details of the app, os, and device that is verifying. Represented by the $app object. Use this field if the client is an app. Note: cannot be used in conjunction with $browser.
 $verified_event -  String The type of the reserved event being verified, e.g., $login , $create_account , $update_account , $update_password , $create_content , $create_order , $transaction , $update_content , $update_order
 $verified_entity_id -  String The ID of the entity impacted by the event being verified, e.g.,
- Session ID for $login
- Order ID for $create_order
- Content ID for $create_content
- No ID needed for $create_account , $update_account , or $update_password
 $verification_type -  String The type of verification being performed. Allowed Values
- $sms An SMS is sent to the user's phone containing a code, URL or other process to authenticate the user.
- $phone_call A phone call is made to the user's phone containing a code or other process to authenticate the user.
- $email An email is sent to the user's email address containing a code, URL or other process to authenticate the user.
- $app_tfa A passcode is generated for the user via an application.
- $captcha A captcha is used to detect and stop possible automated or scripted activity (e.g. bots).
- $shared_knowledge A shared secret (e.g., former address, mother’s maiden name, photo) is used to authenticate the user.
- $face A selfie processed via face recognition algorithms is used to authenticate the user.
- $fingerprint A fingerprint is used to authenticate the user.
- $push A notification is sent to a known device, and the user needs to approve it to authenticate.
- $security_key A hardware token (e.g., USB stick) is used to authenticate the user.
 $verified_value -  String The phone number (e.g. 14155551212, 442072193000), email address (e.g. bob@example.com) or the question (e.g., "what is your mother's maiden name?") used for verification. Do NOT send the answer to the security question!
This value should be passed when the $verification_type is set to $sms , $phone_call , $email or $shared_knowledge .
 $reason -  String The trigger for the verification Allowed Values
- $user_setting The user opted to require a verification with every login.
- $manual_review A representative of the service provider (e.g., analyst, security engineer) forced a verification (e.g., upon noticing a suspicious behavior on the account).
- $automated_rule Input from Sift score, workflows or another system (in-house or third-party) triggered the verification.
 $reason -  $brand_name String Name of the brand of product or service being purchased.
 $reason -  $site_country String Country the company is providing service from.
Use ISO-3166 country code.
 $reason -  $site_domain String Domain being interfaced with.
Use fully qualified domain name .
 $reason -  $keyless_user_id String The Keyless user ID according to your Keyless SDK.
Find valid $keyless_user_id values here .


Reserved Fields

Reserved fields are fields that begin with a $ . These are fields that, due to sending in 
a consistent format across customers, we do lots of analysis on. We also share learning across 
our global network for these fields, giving you a big added benefit.
Note: When you don't have a value for a given field, send the value as null, nil, None , 
etc, or omit the field altogether.
Required

The following reserved fields are required in every event. $api_key String Your Sift REST API key. $user_id String The user’s internal account ID. This field is required on all events performed by the user while
logged in. Users without an assigned $user_id will not show up in the console. Note: User IDs
are case sensitive . You may need to normalize the capitalization of your user IDs. Only the following 
characters may be used: a-z,A-Z,0-9,=, ., -, _, +, @, :, &, ^, %, !, $ $session_id required iF no User ID provided · String The user's current session ID, used to tie a user's action before and after log in or account creation. $type String The name of the event, for example $create_order .
Optional

Each reserved event lists additional reserved fields that add accuracy to your fraud predictions. Send as 
many as you can. In addition to the reserved fields listed with each event, the following reserved fields 
can be sent in any event, including custom events. $ip String IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps. $time Integer Represents the time the event occurred in your system. Send as a UNIX timestamp in milliseconds as shown in the historical backfill tutorial . $keyless_user_id String The Keyless user id is provided by the Keyless SDK. This ID is used to communicate to the Keyless system for Keyless Workflow authentications.


Address

Address field type represents a physical address, such as a billing or
shipping address for eCommerce or sent and received address for remittance. The value must be a nested
object with the appropriate address subfields. We extract many geolocation features from these values.
An address is represented as a nested JSON object.
Fields of this type : $arrival_address , $billing_address , $departure_address , $location , $sent_address , $received_address , and $shipping_address
The values for a $sent_address or $received_address should only be sent with $transaction event.
These values should be used in relation to the new transaction types buy / sell / send / receive .

 $name -  String Provide the full name associated with the address here. Concatenate first name and last name together if you collect them separately in your system.
 $address_1 -  String Address first line, e.g. , "2100 Main Street".
 $address_2 -  String Address second line, e.g. , "Apt 3B".
 $city -  String The city or town name.
 $region -  String The region portion of the address. In the USA, this corresponds to the state.
 $country -  String The ISO-3166 country code for the address.
 $zipcode -  String The postal code associated with the address, e.g. , "90210". Send +4 postal codes with a '-',
e.g. "90210-3344"
 $phone -  String The phone number associated with this address. Provide the phone number as a string
starting with the country code. Use E.164 format or send
in the standard national format of number's origin. For example: "+14155556041" or "1-415-555-6041" for a
U.S. number.


App

The app field type represents the details of an application as well as the device and OS it's running on.

 $os -  String The operating system on which application is running. (e.g. iOS, Android)
 $os_version -  String The operating system version on which application is running. (e.g. 10.3.1, 7.1.1)
 $device_manufacturer -  String The manufacturer of the device on which application is running. (e.g. Samsung, Apple, LG)
 $device_model -  String The model of the device on which application is running. (e.g. SM-G920x, iPhone8,1)
 $device_unique_id -  String The unique ID of the device on which application is running. For iOS, send the IFV identifier.
For Android, send the Android ID.
 $app_name -  String The name of your application.
 $app_version -  String The version of your application. Our accepted format is numbers separated by periods.
 $client_language -  String The language the application content is being delivered in. Use ISO-3166 format for country codes. Examples: "en", "en-us, de", "fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5", etc.


Booking

The $booking is a specialized field, analogous to $item , for travel and event ticketing use cases.
 A $booking represents a reservation purchased by a user.
$bookings should be used in a $create_order or $update_order event instead of $items - an event cannot have both.
$bookings support two additional complex types, $segments and $guests . $segments support more detailed fields for each part of a booking, for example, legs of a flight. $guests supports detailed
fields for each guest on the booking. These fields are optional.
$booking requires a $booking_type . A single $create_order or $update_order event
can have multiple types of bookings, such as sending both $flight and $accommodation bookings in one order.
Please not that $booking does not accept custom fields.
We support fields for integrations specific to the following booking types:


$booking.event_ticket

Tell Sift about a purchase of tickets to a concert, sporting event, or any other type of event.
A booking should be for a single event and seat type - e.g. , a single order purchasing different seat
classes to the same concert should get different booking objects.

 $booking_type -  required · String $event_ticket
 $title -  String A description of the event.
 $start_time -  Integer The start time of the event. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The finish time of the event. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per ticket. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of reservations of the given type purchased by the user. e.g. , 2 for a purchase of two tickets to the same event.
 $guests -  Array of Guests Details of the guests using the tickets. Send as much information about each guest as you capture.
 $event_id -  String For event ticket bookings, this field represents the internal identifier associated with the event.
 $venue_id -  String This field represents the id of the venue.
 $location -  Address This field represents the name and address of the venue.
 $category -  String This field captures the genre of ticket.
 $tags -  Array of Strings This field captures any descriptors of the event. For example, tags might be team names, region, etc.


$booking.accommodation

Tell Sift about a hotel reservation.
Each type of room should be its own booking - e.g. , an order reserving both a single and double room
should get two booking objects.

 $booking_type -  required · String $accommodation
 $title -  String A description of the reservation, e.g. , "Deluxe King, Hotel Alpha".
 $start_time -  Integer The check-in time for a hotel reservation. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The check-out time for a hotel reservation. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per room. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of reservations, e.g. , 2 for two hotel rooms of the same type.
 $guests -  Array of Guests Details of the guests on the reservation. Send as much information about each guest as you capture.
 $room_type -  String This field represents the type of room. e.g. , "Double Queen Deluxe"
 $venue_id -  String This field represents the id of the hotel.
 $location -  Address This field represents the address of the hotel.
 $tags -  Array of Strings This field captures any descriptors of the booking. For example, tags might be "non-smoking", "wi-fi", etc.


$booking.flight

Tell Sift about the purchase of an airline ticket.
Each type of ticket should be its own booking - e.g. ,  an order reserving both business class and economy
seats on the same flight should get two booking objects.
A flight booking should also be for one trip, i.e. , a round trip should be split into two bookings.

 $booking_type -  required · String $flight
 $title -  String A description of the flight reservation.
 $start_time -  Integer The departure time for the first flight leg in the booking. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The arrival time for the last flight leg in the booking etc. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per flight ticket (including all legs of the flight). Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of tickets of the given type purchased by the user.
 $guests -  Array of Guests Details of the guests on the flight. Send as much information about each guest as you capture.
 $segments -  Array of Segments Use this field to send information about each leg of the flight (even if there’s only one).
 $tags -  Array of Strings This field captures any descriptors of the booking. For example, tags might be "premium economy", "summer sale", etc.


$booking.bus

Tell Sift about bus, train, or rail tickets.
Each type of ticket should get its own booking - e.g. , an order reserving both business class and economy
seats on the same ride should get two booking objects. However, an order booking two economy seats on the same
flight would be one booking with quantity 2.
A booking should also be for one trip - ie, a round trip should be split into two bookings.

 $booking_type -  required · String $bus
 $title -  String A description of the trip.
 $start_time -  Integer The departure time for a trip. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The arrival time of the trip. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per ticket. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of tickets of the given type purchased by the user.
 $guests -  Array of Guests Details of the guests on the trip. The number of guests and the quantity of tickets do not need to match.
Send as much information about each guest as you capture.
 $segments -  Array of Segments Use this field to send information about each ride of the trip (even if there’s only one).
 $tags -  Array of Strings This field captures any descriptors of the trip. For example, tags might be "sleeper", "summer sale", etc.


$booking.rideshare

Tell Sift about a booking of a ride in a ridesharing marketplace.

 $booking_type -  required · String $rideshare
 $title -  String A description of the ride.
 $start_time -  Integer The pickup time of the ride. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The estimated drop-off time of the ride. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per ride of the booking. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of reservations of the given type purchased by the user. This does not necessarily reflect the
number of guests (eg, a single ride may be booked for two guests).
 $guests -  Array of Guests Details of the guests on the booking. Send as much information about each guest as you capture.
 $segments -  Array of Segments Add more specific information about the ride (even if there is only one segment).
 $tags -  Array of Strings This field captures any descriptors of the ride. For example, tags might be "sale", "first ride", etc.


$booking.vehicle

Tell Sift about a reservation of a car or other vehicle.
A reservation should be for a single type of vehicle (i.e, two different types of vehicles should be in two
bookings. However, two of the same vehicle types should be in the same booking with quantity 2).

 $booking_type -  required · String $vehicle
 $title -  String A description of the reservation.
 $start_time -  Integer The pickup time for the reservation. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The drop-off time of the reservation. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per vehicle of the reservation. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of reservations of the given type purchased by the user. This does not reflect the number of
guests (eg, a single vehicle may be booked for two guests), but would reflect the number of vehicles of the same type.
 $guests -  Array of Guests Details of the guests on the reservation. Send as much information about each guest as you capture.
 $segments -  Array of Segments Add more specific information about the reservation.
 $tags -  Array of Strings This field captures any descriptors of the reservation. For example, tags might be "sale", "first ride", etc.


$booking.cruise

Tell Sift about the booking of a cruise ticket.
Each type of ticket should be its own booking - for example, an order reserving both premium and standard rooms
on the same cruise should get two booking objects.
A booking should also be for one trip - ie, a round trip should be split into two bookings.

 $booking_type -  required · String $cruise
 $title -  String A description of the trip.
 $start_time -  Integer The departure time of the cruise. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The arrival time of the cruise. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per ticket of the cruise. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of tickets of the given type purchased by the user.
 $guests -  Array of Guests Details of the guests on the cruise. Send as much information about each guest as you capture.
 $segments -  Array of Segments For travel bookings, use this field to send information about the travel segments.
Eg. each item in this array would represent a flight segment, a rideshare ride etc
 $tags -  Array of Strings This field captures any descriptors of the reservation. For example, tags might be "last minute deal", "abcd cruise line", "contest winner" etc.


$booking.other

For any reservation use case not covered above, leverage whichever of the following fields are appropriate:

 $booking_type -  required · String $other
 $title -  String A description of the booking.
 $start_time -  Integer The start time of the reservation. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The finish time of the reservation. Send as a UNIX timestamp in milliseconds.
 $price -  String The price per unit of the booking. Send this field in micros in the base unit of the $currency_code .
1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of
fractional denominations, like the Japanese Yen, use 1 JPY = 1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $quantity -  Integer The count of reservations of the given type purchased by the user.
 $guests -  Array of Guests Details of the guests on the booking. Send as much information about each guest as you capture.
 $segments -  Array of Segments For bookings with multiple segments, use this field to send information about the travel segments. e.g.,
each item in this array would represent a flight leg.
 $room_type -  String For hotels or other accommodation bookings, this field represents the type of room. Eg. "Double Queen Deluxe"
 $event_id -  String For event ticket bookings, this field represents the internal identifier associated with the event.
 $venue_id -  String For event ticket bookings, this field represents the name of the venue.
 $location -  Address For event ticket and accommodation bookings, this field represents the address of venue or hotel respectively.
 $category -  String This field can be used to send the category of booking. For event tickets, this field captures the genre of a ticket.
 $tags -  Array of Strings This field captures any descriptors of the events. For event tickets, for example, tags might be team names, region, etc.


Browser

The $browser field type contains information about the browser.

 $user_agent -  RECOMMENDED · String The user agent of the browser that is interacting with your website.
 $accept_language -  The language(s) that the client is requesting the site content be delivered in.
Use ISO-3166 format for country codes.
Examples: "en", "en-us, de", "fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5", etc.
 $content_language -  The language(s) of the user that the delivered site content is intended for.
Use ISO-3166 format for country codes.
Examples: "en", "en-us, de", "fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5", etc.


Credit Point

The Credit Point field type generically models monetary and non-monetary rewards (e.g. in-game
currency, stored account value, MBs storage, frequent flyer miles, etc) associated with a promotion.
Credit points are usually used for promotions that apply at the account level. The value must be a nested
JSON object populated with the appropriate information to describe the credit_point. All values are required.
A credit_point is an object that gets included as part of promotion object. Learn more about promotions .

 $amount -  Required · Integer The amount of credits the promotion is worth.
 $credit_point_type -  Required · String The type of credit point. Particularly useful if you have multiple types of credit points that
you give out. Enables us to distinguish amongst them to find patterns (e.g. days of free service,
karma, frequent flyer miles, MBs of storage, etc.).


Digital Order

The $digital_order field type represents a digital asset which can be part of a cryptocurrency or
digital asset transaction. The value must be a nested object with the appropriate asset subfields.
Generally used in the $create_order , $update_order , or $transaction events. Please note
that $digital_order cannot be used with $item or $booking .

 $digital_asset -  required · String The trading name of the asset.
 $pair -  String Trading pair symbol representing the conversion of one currency to another. For example, BTC_USD
represents moving bitcoin to US dollars.
 $asset_type -  String Any digital asset that has value or established ownership. Allowed Values
- $coin $commodity $crypto $fiat $token
 $order_type -  String The type of trade or exchange being made. Allowed Values
- $limit $market $stop_limit $stop_loss $take_profit $take_profit_limit
 $volume -  String The amount or quantity of the digital asset. This should be a string representation of a double value.


Discount

The Discount field type generically models monetary discounts that are associated with a
promotion (e.g. $25 off an order of $100 or more, 10% off, etc). Discounts are usually used for
promotions that apply at the order level. The value must be a nested JSON object populated with the
appropriate information to describe the discount. Not all sub-fields will likely apply to a given
discount. Populate only those that apply.
A discount is an object that gets included as part of promotion object. Learn more about promotions .

 $percentage_off -  Float The percentage discount. If the discount is 10% off, you would send "0.1".
 $amount -  Integer The amount of the discount that the promotion offers in micros in the base unit of the $currency_code . 1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros.
For currencies without cents of fractional denominations, like the Japanese Yen, use 1 JPY =
1000000 micros.
 $currency_code -  String ISO-4217 currency code for the amount. e.g. , USD, CAD, HKD. If your site uses alternative currencies, like bitcoin or points systems,
specify that here.
 $minimum_purchase_amount -  Integer The minimum amount someone must spend in order for the promotion to be applied. The amount should be in
micros in the base unit of the $currency_code . 1 cent = 10,000 micros. $1.23 USD = 123
cents = 1,230,000 micros. For currencies without cents of fractional denominations, like the Japanese
Yen, use 1 JPY = 1000000 micros.


Guest

The Guest field type represents a person using a booking. The value must be a nested object with the
appropriate subfields.
$guest is used as an array item in the $guests subfield of $booking .

 $name -  String Name of the individual on the booking.
 $email -  String The email address provided for the guest.
 $phone -  String The phone number provided for the guest. Provide the phone number as a string starting with
the country code. Use E.164 format or send in the standard national format of number's origin. For example: "+14155556041" or
"1-415-555-6041" for a U.S. number.
 $loyalty_program -  String The name of the loyalty program used for this guest.
 $loyalty_program_id -  String The membership id for the loyalty program used for this guest.
 $birth_date -  String The date of birth of the guest. Use ISO 8601 format, e.g. "1985-03-20" or "19850320"


Image

The Image complex type represents an image hosted on your website or app, typically uploaded by a user.
 Used in the in one of the $create_content or $update_content events.

 $md5_hash -  String The MD5 hash of the image file. A hexadecimal hash for a single file could look like this: 0cc175b9c0f1b6a831c399e269772661 .
 $link -  String A hyperlink to the image file.
 $description -  String The user-supplied caption with the image.


Item

The Item field type represents a product or service for sale
in your business. The value must be a nested object with the appropriate
item subfields. Generally used in the $add_item_to_cart and $remove_item_from_cart events. An $item is represented
as a nested JSON object.
Please note that $item cannot be used with $booking . Customers in event ticketing or travel
(such as OTAs, Rideshare, Vehicle rentals, Hotels, etc) should use $booking instead to leverage
Sift’s specialization in Travel and Ticketing use cases.

 $item_id -  String The item's unique identifier according to your systems.  Use the same ID that you would use to look up
items on your website's database.
 $product_title -  String The item's name, e.g. , "Men's Running Springblade Drive Shoes, US10".
 $price -  Integer The item unit price in micros, in the base unit of the $currency_code . 1 cent = 10,000 micros.
$1.23 USD = 123 cents = 1,230,000 micros.
 $currency_code -  String ISO-4217 currency code for the price.
 $quantity -  Integer Quantity of the item.
 $upc -  String If the item has a Universal Product Code (UPC), provide it here.
 $sku -  String If the item has a Stock-keeping Unit ID (SKU), provide it here.
 $isbn -  String If the item is a book with an International Standard Book Number (ISBN), provide it here.
 $brand -  String The brand name of the item.
 $manufacturer -  String Name of the item's manufacturer.
 $category -  String The category this item is listed under in your business. e.g. , "kitchen appliance", "menswear > pants".
 $tags -  Array of Strings The tags used to describe this item in your business. e.g. , "funny", "halloween".
 $color -  String The color of the item.
 $size -  String The size of the item.


Merchant Profile

The $merchant_profile field type contains information about the merchant or seller providing the goods or service.

 $merchant_id -  required · String The internal identifier for the merchant or seller providing the good or service.
 $merchant_category_code -  String The merchant category code follows the 4-digit ISO code. Use ISO-18245 MCC ISO Merchant Category Code.
 $merchant_name -  required · String The name of the merchant or seller providing the good or service.
 $merchant_address -  Address The address associated with the merchant of record.


Ordered From

The $ordered_from field type contains information about the specific physical location providing the good or service.
This can also be used to capture pickup, delivery locations, etc.
We use the values of the latest version of the $ordered_from object for each $order_id for reporting in your console.
If you send all other fields except $zipcode in a $create_order and then send only $zipcode in a later, associated $transaction for the same $order_id , we will only use $zipcode for this order in reporting and
forget the initial $ordered_from fields sent. So, we recommend that you send this object in either the $create_order / $update_order events OR in $transaction events, but not in both. Choose the time where you have the most
information to send or where it is easiest to include.

 $store_id -  String The customer’s internal identifier for the specific physical location providing the good or service.
 $store_address -  Address The address of the specific physical location providing the good or service.


Payment Method

The payment_method field type represents information about the
payment methods provided by the user. The value must be a nested object with
the appropriate item subfields for the given payment method. Generally used
with the $create_order or $transaction events.

 $payment_type -  String The general type of payment being used. Allowed Values
- $cash $check $credit_card $crypto_currency $debit_card $digital_wallet $electronic_fund_transfer  $financing $gift_card $invoice $in_app_purchase $money_order  $points $prepaid_card $store_credit $third_party_processor $voucher $sepa_credit $sepa_instant_credit  $sepa_direct_debit $ach_credit $ach_debit $wire_credit $wire_debit If your payment system is not covered by one of the values above please contact support .
 $payment_gateway -  String The specific gateway, company, product, etc. being used to process payment. Allowed Values
- $abra $acapture $accpet_blue $adyen $aeropay $afex $affinipay  $affipay $affirm $afrivoucher $afterpay $airwallex $alipay $alipay_hk  $allpago $altapay $amazon_payments $ambank_fpx $amex_checkout  $android_iap $android_pay $apg $aplazo $apple_iap $apple_pay $argus  $asiabill $astropay $atrium $au_kantan $authorizenet $avangate  $balanced $bancodobrasil $bancontact $bancoplural $banorte $banrisul  $banwire $barclays $bayanpay $bbcn $bcb $beanstream  $belfius $best_inc $billdesk $billpocket $bitcash $bitgo $bitpay  $bizum $blackhawk $blik $blockchain $bluepay $bluesnap  $bnpparibas $boacompra $bob $boku $bold $boletobancario  $boltpay $bpay $bradesco $braintree $bread $bridgepay  $brite $buckaroo  $cadc $cardconnect $cardknox $cashlib $catchball $ccbill  $ccavenue $ceevo $cepbank $chain_commerce $chase_paymentech  $checkalt $checkoutcom $cielo $circle $citrus_pay  $clear_junction $clearbridge $clearsettle $clearcommerce  $cleverbridge $close_brothers $cloudpayments $codi $cofinoga $coinbase  $coindirect $coinpayments $collector $community_bank_transfer  $commweb $compropago $concardis $conekta $credit_union_atlantic  $credorax $credsystem $cross_river $cuentadigital $culqi  $cybersource $cryptocapital $cryptopay $currencycloud  $d_barai $dana $daopay $datacash $dbs_paylah $dcbank $debitway $deltec  $democracy_engine $deutsche_bank $dibs $digital_river $digitalpay  $dlocal $docomo $doko $dospara $dotpay $dragonpay $dwolla  $ebanx $ecommpay $ecopayz $edenred $edgil_payway $efecty  $eft $elavon $empcorp $enets $epay $epayeu $epoch $epospay  $eprocessing_network $eps $esitef $etana $euteller $everypay  $eway $e_xact  $fastnetwork $fat_zebra $fidor $finix $fiserv  $first_atlantic_commerce $first_data $flexepin $flexiti $fluidpay  $flutterwave $fpx $frick $fxpaygate  $g2apay $galileo $gcash $geoswift $getnet $giropay  $globalcollect $global_payments $global_payways $gmo $gmopg  $gocardless $gocoin $google_pay $google_wallet $grabpay  $hanmi $happy_money $hayhay $hdfc_fssnet $heidelpay $hipay $humm  $hyperpay  $i2c $ibok $ideal $ikajo $incomm $incore $ingenico  $inghomepay $inovapay $inovio $instamojo $interac  $internetsecure $interswitch $intuit_quickbooks_payments $ipay  $isignthis $itau $itelebill $iugu $ixopay $iyzico  $izettle  $jabong $jatis $jeton $jnfx $juspay  $kakaopay $kash $kbc $kddi $kevin $klarna $knet $komoju $konbini  $kushki  $latamgateway $latampass $laybuy $lean $lemonway $lifemiles  $limelight $linepay $link4pay $logon  $mada $mangopay $mastercard_payment_gateway $masterpass  $maxipago $maxpay $maybank $mcb $meikopay $mercadopago  $merchant_esolutions $merpay $midtrans $minerva $mirjeh $mobile_money  $mockpay $moip $mollie $momopay $moneris_solutions $moneygram  $monoova $moyasar $mpesa $muchbetter $multibanco  $multicaja $multiplus $mvb $mybank $myfatoorah  $nanaco $nanoplazo $naranja $naverpay $neosurf $net_cash $netbilling  $netregistry $neteller  $network_for_good $nhn_kcp $nicepay $ngenius $nmcryptgate  $nmi $noble $noon_payments  $ocean $ogone $okpay $omcp $omise $onebip $opay  $openpaymx $optile $optimal_payments $ovo $oxxo  $paddle $pagar_me $pagoefectivo $pagofacil $pagseguro $paidy  $papara $paxum $pay_garden $pay_zone $pay4fun $paybright  $paycase $paycash $payco $paycell $paydo $paydoo $payease $payeasy  $payeer $payeezy $payfast $payfix $payflow $payfort  $paygarden $paygate $paygent $payix $payjp $payjunction  $paykwik $paylike $paymaya $paymentez $paymentos $paymentwall  $payment_express $paymill $paynl $payone $payoneer $payop  $paypal $paypal_express $paypay $paypost $paysafe $paysafecard $paysera  $paysimple $payssion $paystack $paystation $paytabs $paytm  $paytrace $paytrail $payture $payway $payu $payulatam  $payvector $payza $payzen $peach_payments pep $perfect_money  $perla_terminals $pinpayments $pivotal_payments $pix $plaid $planet_payment  $plugandplay $poli $posconnect $primetrust $princeton_payment_solutions  $prismpay $processing $przelewy24 $psigate $pulse $pwmb  $qiwi $qr_code_bt $quadpay $quaife $quickpay $quickstream  $raberil $radial $railsbank $rakbank $rakuten_checkout  $rapipago $rappipay $rapyd $ratepay $ravepay $razorpay $rbkmoney  $reach $recurly $red_dot_payment $rede $redpagos $redsys  $rewardspay $rietumu $ripple $rocketgate  $safecharge $safetypay $sagepay $saltedge $samsung_pay  $santander $sbi $secure_trading $securepay $securionpay  $sentbe $sepa $sermepa $servipag $sezzle $shopify_payments $sightline  $signature $signet $silvergate $simplify_commerce $skrill  $smart2pay $smartcoin $smartpayments $smbc $snapscan $sofort  $softbank_matomete $solanapay $splash_payments $splitit $spotii $sps_decidir  $square $stcpay $stitch $stone $stp $stripe $swedbank  $synapsepay  $tabapay $tabby $tamara $tapcompany $tdcanada $telerecargas  $tfm $tipalti $tnspay $todopago $toss $touchngo $towah $tpaga  $transact_pro $transactive $transfirst $transpay $truelayer $truemoney  $trustcommerce $trustly $trustpay $tsys_sierra $tsys_transit  $tu_compra $twoc2p $twocheckout  $undostres $unlimint $unionpay $upay $usa_epay $usafill  $utrust  $vantiv $vapulus $venmo $veritrans $versapay $vesta  $viabaloto $vindicia $vip_preferred $virtual_card_services $visa $vme  $vogogo $vpos  $watchman $web_money $webbilling $webmoney $webpay $webpay_oneclick  $wechat $wepay $western_union $wirecard $worldpay  $worldspan $wp_cnpapi $wyre  $xfers $xipay  $yandex_money $yapily $yapstone  $zapper $zeus $zgold $zip $zipmoney $zoop $zooz_paymentsos If the payment gateway you use is not supported, contact support and we'll add it.
 $card_bin -  String The first six or eight digits of the credit card number. These numbers contain information about the card issuer,
the geography and other card details.
 $card_last4 -  String The last four digits of the credit card number.
 $avs_result_code -  String Response code from the AVS address verification system. Used in payments involving credit cards.
 $cvv_result_code -  String Response code from the credit card company indicating if the CVV number entered matches the number on
record. Used in payments involving credit cards.
 $verification_status -  String Use $verification_status to indicate the payment method has been verified.
The value can be $success , $failure or $pending . For instance, if you request payment
method verification from a payment processor and receive a failure set the value to $failure .
 $routing_number -  String This is the ABA routing number, BIC or SWIFT code used.
 $shortened_iban_first6 -  String This is the first 6 characters of the IBAN structure as defined in ISO 13616-1 .
 $shortened_iban_last4 -  String This is the last 4 characters of the IBAN structure as defined in ISO 13616-1 .
 $sepa_direct_debit_mandate -  Boolean Use true or false to indicate if a end-user/customer has provided authorization to collect future payments via Sepa Direct Debit.
 $decline_reason_code -  String In case of a declined payment, response code received from the payment processor indicating the reason for
the decline.
 $wallet_address -  String The value entered to identify the Wallet used for the payment.
 $wallet_type -  String The type of wallet used in the payment. Allowed Values
- $crypto $digital $fiat
 $paypal_payer_id -  String Payer ID returned by Paypal.
 $paypal_payer_email -  String Payer email address returned by Paypal.
 $paypal_payer_status -  String Payer status returned by Paypal.
 $paypal_address_status -  String Payer address status returned by Paypal.
 $paypal_protection_eligibility -  String Seller protection eligibility returned by Paypal.
 $paypal_payment_status -  String Payment status returned by Paypal.
 $stripe_cvc_check -  String CVC verification result returned by Stripe.
 $stripe_address_line1_check -  String Address line 1 verification result returned by Stripe.
 $stripe_address_line2_check -  String Address line 2 verification result returned by Stripe.
 $stripe_address_zip_check -  String Address zip code verification result returned by Stripe.
 $stripe_funding -  String Funding source returned by Stripe.
 $stripe_brand -  String Card brand returned by Stripe.
 $account_holder_name -  String Full name of the user associated with the account.
 $account_number_last5 -  String The last 5 digits of the account number associated with an ACH or a Wire transaction.
 $bank_name -  String Name of the financial institution used.
 $bank_country -  String Two-digit ISO-3166 code for the bank country of origin.


Promotion

The Promotion field type generically models different kinds of promotions such as referrals,
coupons, free trials, etc.  The value must be a nested JSON object which you populate with the
appropriate information to describe the promotion. Not all sub-fields will likely apply to a given promotion.
Populate only those that apply.
A promotion can be added when creating or updating
an account , creating or updating an order ,
or on its own using the $add_promotion event. The promotion object supports both monetary
(e.g. $25 coupon on first order) and non-monetary (e.g. "1000 in game points to refer a friend").

 $promotion_id -  String The ID within your system that you use to represent this promotion. This ID is ideally unique to
the promotion across users (e.g. "BackToSchool2016").
 $status -  String The status of the addition of promotion to an account. Best used with the $add_promotion event. This way you can pass to Sift both successful and failed attempts when using a
promotion. May be useful in spotting potential abuse. Allowed Values
- $success  $failure
 $failure_reason -  String When adding a promotion fails, use this to describe why it failed. Allowed Values
- $already_used  $invalid_code  $not_applicable  $expired
 $description -  String Freeform text to describe the promotion.
 $referrer_user_id -  String The unique account ID of the user who referred the user to this promotion. Note: User IDs
are case sensitive .
 $discount -  Discount The $discount field type generically models monetary discounts that are associated with a
promotion (e.g. $25 off an order of $100 or more, 10% off, etc). Most promotions likely require
a discount object or credit_point object to describe them, though both can be set
for a given promotion.
 $credit_point -  Credit Point The credit_point field type generically models monetary and non-monetary rewards
(e.g. in-game currency, stored account value, MBs storage, frequent flyer miles, etc.)
for a promotion. Most promotions likely require a credit_point object or discount object to describe them, though both can be set for a given promotion.


Segment

The Segment field type supports more detailed information about the components of a travel $booking .
The value must be a nested object with the appropriate subfields.
We recommend sending at least one segment for the following booking_types:
Even if there’s only a single segment associated with the booking, use segment to send valuable information about the trip.

 $departure_address -  Address The address of the start of the journey. This could be the pickup address for rideshare
or the train station address for a rail journey. For flights, you can use the $departure_airport_code in lieu of this field.
 $arrival_address -  Address The address of the end of the journey. This could be the drop-off address for rideshare
or the train station address for a rail journey. For flights, you can use the $arrival_airport_code in lieu of this field.
 $start_time -  Integer The start time of this segment of the journey. This may be departure time for a flight, the expected
pickup time for a rideshare, etc. Send as a UNIX timestamp in milliseconds.
 $end_time -  Integer The finish time of this segment of the journey. This may be departure time for a flight, the expected
pickup time for a rideshare, etc. Send as a UNIX timestamp in milliseconds.
 $vessel_number -  String An identifier for the journey: this could be the flight number ("UA 454"), the car
license plate number ("6XYZ123"), etc.
 $departure_airport_code -  String The IATA code for the
departure airport. For example: "SFO"
 $arrival_airport_code -  String The IATA code for the
arrival airport. For example: "SEA"
 $fare_class -  String A description of the class of travel. Eg. "Premium Economy", "Pool", "E3".


Custom Events and Fields

Custom events and fields capture user behavior and differences not covered by our reserved
 events and fields. For example, a voice over IP (VOIP) business can create a custom event
 called make_call with custom fields that are relevant:



---Curl
// Sample make_call event
{
  "$type"              : "make_call",
  "$api_key"           : "YOUR_API_KEY",
  "$user_id"           : "billy_jones_301",
  "recipient_user_id"  : "marylee819",
  "call_duration"      : 4428
}

---


---Python
import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')

# Sample make_call event
properties = {
  "$user_id"           : "billy_jones_301",
  "recipient_user_id"  : "marylee819",
  "call_duration"      : 4428
}

response = client.track("make_call", properties)

---


---Ruby
require "sift"

client = Sift::Client.new(:api_key => "YOUR_API_KEY")

# Sample make_call event
properties = {
  "$user_id"           => "billy_jones_301",
  "recipient_user_id"  => "marylee819",
  "call_duration"      => 4428
}

response = client.track("make_call", properties)

---


---PHP
require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => 'YOUR_API_KEY'));

// Sample make_call event
$properties = array(
  '$user_id'           => 'billy_jones_301',
  'recipient_user_id'  => 'marylee819',
  'call_duration'      => 4428
);

$response = $client->track('make_call', $properties);

---


---Java
import com.siftscience.SiftClient;
import com.siftscience.EventRequest;
import com.siftscience.model.CustomEventFieldSet;

SiftClient client = new SiftClient("YOUR_API_KEY");
EventRequest request = client.buildRequest(new CustomEventFieldSet()
        .setUserId("billy_jones_301")
        .setEventType("make_call")
        .setCustomField("recipient_user_id", "marylee819")
        .setCustomField("call_duration", 4428)
);

EventResponse response;
try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
    return;
}

response.isOk(); // true



---


For every custom event, three fields are required:
- the $type field where you specify the name of the custom event you're creating. Note that the leading $ denotes reserved events, and may not be used in custom events. Custom event names may only include alphanumeric characters and _ .
- the $api_key field where you provide your REST API key.
- the $user_id or, if not available, the $session_id which identifies the user taking this action.
For guidance on how to create custom events, see our Custom Events and Fields guide.


Custom Field Suffixes

The following the suffixes should be used for custom fields when relevant: Email _email · String Sift performs a number of fraud detection algorithms on emails, including matching against throwaway email
domains, and looking for similarity to known fraudsters in the past. Send any other emails associated with the user in field names like secondary_email . Phone _phone · String Sift can perform lookups to identify country and region of phone numbers if the data is well formed. 
Provide the phone number as a string starting with the country code. Use E.164 format or send in the standard national format of
number's origin. For example: "+14155556041" or "1-415-555-6041" for a U.S. number. Send phone numbers in field names like secondary_phone and mobile_phone . Latitude _lat · Float Sent as a floating point number with at least two significant figures. Sift uses this data to 
calculate location and movement, which are particularly useful for businesses where location is an 
important part of the transaction and for mobile transactions. Typically used along with longitude. Send latitudes in field names like dropoff_location_lat . Longitude _lng · Float Sent as a floating point number with at least two significant figures. Sift uses this data to 
calculate location and movement, which are particularly useful for businesses where location is an 
important part of the transaction and for mobile transactions. Typically used along with latitude. Send longitudes in field names like dropoff_location_lng . ID _id · String ID of a user or other entity. Valid characters in IDs are alphanumeric characters (without space) and: = , . , - , _ , + , @ , : , & , ^ , % , ! , $ . Send IDs in field names like buyer_user_id or store_id . Status _status · String Status of an event. Allowed Values $success $failure $pending Many events ( e.g. , payment authorization, email verification) result in some 
permission or verification state. End field names with _status to capture these permission states. User-entered text _title , _desc , _message , _name , · String When users enter text in a form, send with one of the supported suffixes to take advantage of additional 
machine learning features. Send user-entered text in field names like post_title , job_desc , profile_message , or user_name .


Error Codes

A successful API request will respond with an HTTP 200 . 
An invalid API request will respond with an HTTP 400 . 
The response body will be a JSON object describing why the request failed.
Any non-zero status indicates an error.



---Curl
{
    "status" : 51,         // Non-zero status indicates an error!
    "error_message" : "Invalid API Key. Please check your credentials and try again.",
    "time" : 1327604222,   // When we received the original request (as seconds since the epoch)
    "request" : "{ "$api_key": "XXXXXXXXXXX", "$type": "$capture_payment"... }"
}

---


---Python
# To check if the call was successful:
response.is_ok() # returns true on successful calls, false on failed score requests.

response.api_status         # returns Sift Error Code, 51 in this case.

response.api_error_message  # returns the error message associated with the api_status, "Invalid API Key. Please check your credentials and try again." in this case.

---


---Ruby
# To check if the call was successful:
response.ok? # returns true on successful calls, false on failed score requests.

response.api_status         # returns Sift Error Code, 51 in this case.

response.api_error_message  # returns the error message associated with the api_status, "Invalid API Key. Please check your credentials and try again." in this case.

---


---PHP
// To check if the call was successful:
response->isOk() // returns true on successful calls, false on failed score requests.

response->apiStatus         // returns Sift Error Code, 51 in this case.

response->apiErrorMessage  // returns the error message associated with the api_status, "Invalid API Key. Please check your credentials and try again." in this case.

---


---Java
// To check if the call was successful:
response.isOk(); // returns true on successful calls, false on failed score requests.

response.getApiStatus(); // returns Sift Error Code, 51 in this case.
response.getApiErrorMessage();  // returns the error message associated with the api_status, "Invalid API Key. Please check your credentials and try again." in this case.

---


Possible status codes

- -4 Service currently unavailable. Please try again later.
- -3 Server-side timeout processing request. Please try again later.
- -2 Unexpected server-side error
- -1 Unexpected server-side error
- 0 Success
- 51 Invalid API key
- 52 Invalid characters in field name
- 53 Invalid characters in field value
- 55 Missing required field
- 56 Invalid JSON in request
- 57 Invalid HTTP body
- 60 Rate limited
- 104 Invalid API version
- 105 Not a valid reserved field
- 114 Invalid event type
- 116 Event cannot be processed due to legal restrictions
- 117 List exceeds maximum size
If our servers are dealing with unexpected problems, you'll likely see an HTTP 500 response.


Decisions Overview

Decisions represent business actions taken on a user, order, content or session (eg "Block Order", 
"Approve User", etc). You use Decisions to record of what has happened. Sift uses 
this information to continuously improve the accuracy of your risk scores.
When integrating with Sift, you need to create Decisions that represent the different business
actions your team takes. These will vary based on your business but some examples could include:
"Accept Order”, “Approve Post”, “Put User on Watchlist”, “Block Order”, “Ban User”, etc.
Decisions are entirely customizable by you to meet the needs of your business. Decisions are
created and updated using the Decisions page of the Console.
Using Decisions

Decisions can be applied from within the Sift console, sent by your application to the
Sift API, or from a Sift Workflow. Whenever a Decision is applied, it should be
accompanied by  some business action you are taking on your side. For example:
- From the Sift console - When an analyst manually reviews a user and decides an
order should be blocked, the analyst would click a Decision button in the console to cancel
the order. Once it’s clicked, Sift sends a webhook to your system so that you can
cancel the order within your system.
- From your application - When your application logic decides to block an order, you’d
first block the order within your system and then send that Decision to the Sift API
to record what took place.
- From a Workflow - When your Sift Workflow logic determines to block the creation of a post (eg
Content Abuse Score > 95), Sift generates the Decision on that content, and sends a
Webhook to your system so you can block the post within your system.
Decision Properties




---Curl
{
  "id": "credit_card_fraud_payment_abuse",
  "name": "Credit Card Fraud",
  "description": "cancel and refund all of the user's pending order.",
  "entity_type": "user",
  "abuse_type": "payment_abuse",
  "category": "block",
  "webhook_url": "http://webhook.example.com",
  "created_at": 1468005577348,
  "created_by": "admin@example.com",
  "updated_at": 1469229177756,
  "updated_by": "billy@exmaple.com"
}
---


A Decision object includes the following:
- id a unique ID within Sift that is set when the Decision is created.
- name The name of the Decision that is shown to analysts within the Sift
console.
- description a human friendly description of the Decision. This is displayed along with
the decision name in the Console to help your users better understand what action they are
taking.
- entity_type describes whether the decision is related to an order, user, session or content.
- abuse_type The type of abuse the Decision is related to. Sift can learn the different
patterns of abuse you face. The possible values are: payment_abuse , account_abuse  content_abuse  promotion_abuse  account_takeover
- category describes the type of action being taken. The 3 possible categories are:
-- BLOCK : You are taking a negative action. (eg "Stop Order", "Blacklist User",
"Ban Listing", etc)
-- WATCH : Your team is not ready to fully block or accept this entity. (eg "Require
Verification", "Limit Order Amount", "Freeze Listing", etc)
-- ACCEPT : You are taking a positive action. (eg "Ship Order", "Approve User",
"Publish Listing", etc)
- webhook_url URl Sift will send a webhook to when a Decision is made within the Sift
Console or from a Sift Workflow
When you apply a Decision, it represents a business action taken at a specific point in time. As
a result, once a Decision is made, it can't be deleted or modified. However, you can represent
updates by applying a subsequent Decision to that entity. This way, you'll have a full
and complete record of what occurred. You can always retrieve the most recent Decision by using the Decision Status API .
Decisions API Overview

The Decisions APIs allow you to:
- Apply Decisions from your application when you take business actions on an entity.
- Get the latest Decisions Status for an entity.
- Get the list of Decisions you've created within Sift.
- Receive webhooks about Decisions made by your Sift Workflows.


Apply Decisions

The Apply Decisions API allows you to apply Decisions to users, orders, content or sessions. This is 
important so that Sift can track the actions you've taken within your system and learn from them. 
You can only apply Decisions that are active and already configured for your account in the Decisions section in the Console.
When you send a Decision via the API, we will not send a webhook back to you as you'll already
have a record within your system of what occurred. However, if you were to apply that same
Decision in the Sift Console, we would send a webhook to your application so that you can update
your system.
Request


 decision_id -  required · String The unique identifier of the Decision to be applied to an entity. decision_id and 
descriptions can be retrieved using the GET decisions API Note : A Decision configured with entity_type=user can 
only be applied to a user. Similarly, a Decision configured with entity_type=order can only be applied to an order.
 source -  required · String The source of this Decision. Allowed Values
- MANUAL_REVIEW This Decision was applied by an analyst during review of a user/order.
- AUTOMATED_RULE This Decision was applied to a user/order by an automated rules engine or internal
system. There was no human analysis before this Decision was made.
- CHARGEBACK This Decision was applied to a user/order in response to a chargeback received.
Source of CHARGEBACK should only be used for Decisions your system automatically
takes in response to a Chargeback. Note : Whether or not you take automated
action in response to Chargebacks, you should send Sift the Chargeback events.
 analyst -  String Analyst who applied the Decision, only required when source is set to manual_review . Does not need to be an email, can be any analyst identifier.
 time -  optional  · Long The time the Decision was applied, as a UNIX timestamp in milliseconds. This is only necessary to send for
historical backfill.
 description -  optional  · String A description of the Decision that will be applied.
Response 

For successful requests, the response will have an HTTP status code of 200 .

 entity -  Object The entity object containing information on the entity on which the Decision was
applied.
 decision -  String The Decision object containing information on the Decision that was applied.
 time -  Long The time the Decision was applied, as a UNIX timestamp in milliseconds.


 entity id -  String The id of the entity on which the Decision was applied.
 entity type -  String Type of entity, (user or order), to which Decision was applied.


 decision id -  String The id of the Decision that was applied.


Decision Status

The Decision Status API allows you to query the latest Decision for an entity. Sift
returns the latest Decision status for each abuse type so that you have a full view of the entity.



---Curl
curl -XGET https://api.sift.com/v3/accounts/{accountId}/users/{userId}/decisions
# or
curl -XGET https://api.sift.com/v3/accounts/{accountId}/orders/{orderId}/decisions
# or
curl -XGET https://api.sift.com/v3/accounts/{accountId}/users/{userId}/sessions/{sessionId}/decisions
# or
curl -XGET https://api.sift.com/v3/accounts/{accountId}/users/{userId}/content/{contentId}/decisions
-H 'Content-Type: application/json' \n-u {YOUR_API_KEY}:

---


---Python
import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')

response = client.get_user_decisions('the_user_id')
# or
response = client.get_order_decisions('the_order_id')
# or
response = client.get_content_decisions('the_user_id', 'the_content_id')
# or
response = client.get_session_decisions('the_user_id', 'the_session_id')

---


---Ruby
require 'sift'

client = Sift::Client.new(:api_key = > '{YOUR_API_KEY}', :account_id => '{accountId}')

response = client.get_user_decisions('the_user_id')
# or
response = client.get_order_decisions('the_order_id')
# or
response = client.get_content_decisions('the_user_id', 'the_content_id')
# or 
response = client.get_session_decisions('the_user_id', 'the_session_id')


---


---PHP
require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => '{YOUR_API_KEY}', 'account_id' => '{accountId}'));

$response = $client->getUserDecisions('the_user_id');
// or
$response = $client->getOrderDecisions('the_order_id');
// or
$response = $client->getContentDecisions('the_user_id', 'the_content_id');
// or
$response = $client->getSessionDecisions('the_user_id', 'the_session_id');


---


---Java
import com.siftscience.SiftClient;
import com.siftscience.DecisionStatusResponse;
import com.siftscience.DecisionStatusRequest;
import com.siftscience.model.DecisionStatusFieldSet;

SiftClient client = new SiftClient("YOUR_API_KEY");
DecisionStatusRequest request;
request = client.buildRequest(new DecisionStatusFieldSet()
        .setAccountId("4e1a50e172beb95cf1e4ae54")
        .setEntity(DecisionStatusFieldSet.ENTITY_ORDERS)
        .setEntityId("the_order_id"));
// or
request = client.buildRequest(new DecisionStatusFieldSet()
        .setAccountId("4e1a50e172beb95cf1e4ae54")
        .setEntity(DecisionStatusFieldSet.ENTITY_USERS)
        .setEntityId("the_user_id"));
// or
request = client.buildRequest(new DecisionStatusFieldSet()
.setAccountId("4e1a50e172beb95cf1e4ae54")
.setEntity(DecisionStatusFieldSet.ENTITY_CONTENT)
.setUserId("the_user_id")
.setEntityId("the_content_id"));

// or
request = client.buildRequest(new DecisionStatusFieldSet()
.setAccountId("4e1a50e172beb95cf1e4ae54")
.setEntity(DecisionStatusFieldSet.ENTITY_SESSION)
.setUserId("the_user_id")
.setEntityId("the_session_id"));

DecisionStatusResponse response;
try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
}
Map decisionStatuses = response.getDecisionStatuses();

---


Be sure to replace {accountId} with your Sift account ID, found on the Profile Tab on the Console. Also, make sure to pick an
entity ( users , orders , sessions , or content ) to fill in the id of the entity. Lastly, replace {YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console. You will receive a response in the following format:
Response




---Curl
{
  "decisions": {
    "payment_abuse": {
      "decision": {
        "id": "block_user_payment_abuse"
      },
      "time": 1461963439151,
      "webhook_succeeded": true
    },
    "promo_abuse": {
      "decision": {
        "id": "reject_promo_promo_abuse"
      },
      "time": 1461963431151,
      "webhook_succeeded": true
    },
    "content_abuse": {
      "decision": {
        "id": "block_post_content_abuse"
      },
      "time": 1461963429151,
      "webhook_succeeded": true
    },
    "account_abuse": {
      "decision": {
        "id": "ban_account_account_abuse"
      },
      "time": 1461963839151,
      "webhook_succeeded": true
    },
    "legacy": {
      "decision": {
        "id": "block_user_legacy"
      },
      "time": 1461966439151,
      "webhook_succeeded": false
    },
    "account_takeover": {
      "decision": {
        "id": "block_session_account_takeover"
      },
      "time": 1461966441151,
      "webhook_succeeded": true
    },
    "bot_management": {
      "decision": {
        "id": "suspicious_bot_user"
      },
      "time": 1677040435564,
      "webhook_succeeded": true
    }
  }
}
---


Response Fields


 decisions -  Object A map of abuse types to the associated latest Decisions for the entity. Possible Key Values
- payment_abuse The associated JSON object is the latest Decision for the Payment Abuse abuse type.
- promo_abuse The associated JSON object is the latest Decision for the Promo Abuse abuse type.
- content_abuse The associated JSON object is the latest Decision for the Content Abuse abuse type.
- account_abuse The associated JSON object is the latest Decision for the Account Abuse abuse type.
- legacy The associated JSON object is the latest Decision for the Legacy abuse type.
- account_takeover The associated JSON object is the latest Decision for the Account Takeover abuse type. Note: If a latest Decision does not exist for a particular abuse type, that key and associated JSON object
will not exist in this response.


 decisions latest decision object -  Object The information associated with the latest Decision for a specific abuse type key (read above).


 decisions latest decision object decision -  Object The Decision object containing information on the Decision taken.
 decisions latest decision object time -  Long The time the Decision was applied, as a UNIX timestamp in milliseconds.
 decisions latest decision object webhook_succeeded -  Boolean true if the webhook was successfully sent, false if the webhook failed
to send, null if no webhook is configured.


 decisions latest decision object decision id -  String The unique identifier of the Decision that was taken.  This is generated by taking the first display
name provided for the Decision, replacing spaces with hyphens, and concatenating it with the fraud
type for which this Decision is configured.  Note: You cannot have two Decisions with the same initial
display name for any given fraud type.


Get Decisions

Get Decisions API allows you to retrieve the list of all Decisions you've configured for your
account. Currently, Decisions can only be created in the Decisions section in the Console.
Getting available decisions




---Curl
$ curl -XGET https://api.sift.com/v3/accounts/{account_id}/decisions?abuse_types=payment_abuse,legacy,account_takeover&entity_type=user&from=5&limit=10
-u {YOUR_API_KEY}:

---


---Python
import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')

response = client.get_decisions(entity_type='user', limit=10, start_from=5, abuse_types='legacy,payment_abuse')

---


---Java
import com.siftscience.SiftClient;
import com.siftscience.DecisionStatusResponse;
import com.siftscience.DecisionStatusRequest;
import com.siftscience.model.DecisionStatusFieldSet;

SiftClient client = new SiftClient("{YOUR_API_KEY}");
GetDecisions request = client.buildRequest(new GetDecisionsFieldSet()
        .setAccountId("account_id"))
        .setEntityType(EntityType.USER)
        .setAbuseTypes(ImmutableList.of(AbuseType.PAYMENT_ABUSE, AbuseType.LEGACY)
        .setFrom(5)
        .setLimit(10));

GetDecisionsResponse response;

try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
}

List<Decision> decisions = response.getDecisions();

---


---Ruby
require "sift"

client = Sift::Client.new(api_key: "{YOUR_API_KEY}", account_id: "{account_id}")

response = client.decisions({
  abuse_types: ["payment_abuse", "legacy"],
  entity_type: "user",
  from: 5,
  limit: 10
})

if (response.ok?) {
  decision = response.body["data"].find do |decision_hash|
    decision_hash["id"] == "block_bad_user"
  end
}

---


---PHP
require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => 'YOUR_API_KEY'));

$options = array(
    'abuse_types' => array('payment_abuse', 'legacy'),
    'entity_type' => 'user',
    'from' => 5,
    'limit' => 10
);

$response = $client.getDecisions($options);

---


Query Parameters


 entity_type -  optional · String Return only decisions applicable to the specified entity_type . Allowed Values
- USER This Decision should be applied to users.
- ORDER This Decision should be applied to orders.
- SESSION This Decision should be applied to sessions.
- CONTENT This Decision should be applied to content.
 abuse_types -  optional · Comma-separated strings Return only decisions applicable to specified abuse_types. Allowed Values
- LEGACY Return Decisions associated with the Legacy product.
- PAYMENT_ABUSE Return Decisions associated with the Payment Abuse product.
- ACCOUNT_ABUSE Return Decisions associated with the Account Abuse product.
- CONTENT_ABUSE Return Decisions associated with the Content Abuse product.
- PROMO_ABUSE Return Decisions associated with the Promotion Abuse product.
- ACCOUNT_TAKEOVER Return Decisions associated with the Account Takeover product.
 limit -  optional · integer Used in conjunction with the from parameter to paginate results. limit sets
the maximum number of results to return from each request. The default value for limit is
100.
 from -  optional · integer Used in conjunction with limit parameter to page through the result set. By default,
result set is sorted by id. The field from specifies the index of the first entry in a collection to return. The default
value for from is 0. For example if from is set to 10 you will receive the
11th decision + limit .
Response

For successful requests, the response should have an HTTP status code of 200 . You will receive a response in the following format:



---Curl
{
  "data": [
    {
      "id": "block_user_payment_abuse",
      "name": "Block user",
      "description": "cancel and refund all of the user's pending order.",
      "entity_type": "user",
      "abuse_type": "payment_abuse",
      "category": "block",
      "webhook_url": "http://webhook.example.com",
      "created_at": 1468005577348,
      "created_by": "admin@example.com",
      "updated_at": 1469229177756,
      "updated_by": "billy@exmaple.com"
    },
    {
      "id": "user_looks_ok_legacy",
      "name": "User looks ok",
      "description": "legacy decision for users that looks ok",
      "entity_type": "user",
      "abuse_type": "legacy",
      "category": "accept",
      "webhook_url": "http://webhook.example.com",
      "created_at": 1468005577348,
      "created_by": "admin@example.com",
      "updated_at": 1469229177756,
      "updated_by": "billy@exmaple.com"
    },
    {
      "id": "session_looks_fraud_account_takeover",
      "name": "Session looks fraud",
      "description": "Manually reviewed, looks fraud (suspected ATO)",
      "category": "block",
      "entity_type": "session",
      "abuse_type": "account_takeover",
      "created_at": 1511204532332,
      "created_by": "billy@example.com",
      "updated_at": 1511204539924,
      "updated_by": "billy@example.com"
    }
  ],
  "has_more": "true",
  "next_ref": "https://api.sift.com/v3/accounts/{account_id}/decisions?entity_type=user&abuse_types=payment_abuse,legacy&from=15&limit=10"
}

---


Response Fields


 data -  Array An array of decisions.
 has_more -  boolean For result sets that span multiple requests, the has_more field indicates whether
more results may be retrieved. Used in conjunction with next_ref to paginate
result sets.
 next_ref -  boolean For paginated results, next_ref contains a URL where the next set of results can
be retrieved


 data id -  String The id of the decision. This is auto generated when the Decision is created based on the
initial display name of the Decision.
 data name -  String Display name of the decision.
 data description -  String A description of the Decision. This field is intended as a way to describe the business
action(s) associated with the Decision.
 data entity_type -  String Entity type to which this Decision is applicable. Possible Values
- USER This Decision should be applied to users.
- ORDER This Decision should be applied to orders.
- SESSION The Decision should be applied to sessions.
- CONTENT The Decision should be applied to content.
 data abuse_type -  String Abuse type which this Decision describes. Possible Values
- LEGACY Return Decisions associated with the Legacy product.
- PAYMENT_ABUSE Return Decisions associated with the Payment Abuse product.
- ACCOUNT_ABUSE Return Decisions associated with the Account Abuse product.
- CONTENT_ABUSE Return Decisions associated with the Content Abuse product.
- PROMO_ABUSE Return Decisions associated with the Promotion Abuse product.
 data category -  String Roughly categorizes the type of business action that this Decision represents. For
example, if the Decision was named "Cancel Order" and every time this Decision was
applied your application was configured to cancel the user’s order, this should be
categorized as a BLOCK Decision. Possible Values
- ACCEPT Accept entity
- WATCH Watch entity
- BLOCK Block entity
 data webhook_url -  String URL configured as webhook for this Decision. This is an optional field, only necessary
if you are receiving Webhooks. When a Decision with a webhook is applied via API, no
webhook notification will be sent.
 data created_at -  integer Time at which the Decision was created, as a UNIX timestamp in milliseconds.
 data created_by -  String User who created decision.
 data updated_at -  integer Time at which the Decision was last updated, as a UNIX timestamp in milliseconds.
 data updated_by -  String User who last updated the Decision.


Decision Webhooks

Decision Webhooks can be set up when you create or edit a Decision in the Sift Console.
If you haven't yet configured webhooks on your Decisions, read our Connecting Decisions to Business Actions tutorial to
learn how. Once you've configured webhooks for a Decision, we'll start sending webhooks to the
URL you've specified whenever a Decision is applied by a user or automatically by a Workflow.
Webhooks will be sent with the following body:
Decision Webhook Versions

Sift maintains the right to update the latest version of webhook as long as it does not introduce a breaking change. If there are breaking changes implemented we will create another version of the decision webhook.
Version 1.0 Response




---Curl
{
  "entity": {
    "type": "user",
    "id": "USER123",
    "external_entity_id":"externalEntityId"
  },
  "decision": {
    "id": "block_user_payment_abuse"
  },
  "time": 1461963439151
}

---


Version 1.0 Response Fields


 entity -  Object The entity object containing information on the entity on which the Decision was taken.
 decision -  Object The Decision object containing information on the Decision taken.
 time -  Long The time the Decision was applied, as a UNIX timestamp in milliseconds.


 entity type -  String The type of entity on which the Decision was taken. Possible Values
- user This entity is a user and so the following id field will be a $user_id .
- order This entity is an order and so the following id field will be an $order_id .
- session This entity is a session and so the following id field will be an $session_id .
- content This entity is a content and so the following id field will be a $content_id .
 entity id -  String The unique identifier of the entity on which the Decision was taken.
 entity external_entity_id -  String The external entity id is used for cases where we have a different entity id internally.


 decision id -  String The unique identifier of the Decision that was taken. This is generated by taking the first display
name provided for the Decision, replacing spaces with underscores, and concatenating it with the fraud
type for which this Decision is configured.  Note : You cannot have two Decisions with the same initial
display name for any given fraud type.
Version 1.1 Response

Please contact your account manager or support@sift.com to upgrade to this version.



---Curl
{
  "entity": {
    "type": "user",
    "id": "USER123",
    "user_id": "External-USER123",
    "external_entity_id":"externalEntityId"
  },
  "decision": {
    "id": "block_user_payment_abuse"
  },
  "time": 1461963439151
}

---


Version 1.1 Response Fields


 entity -  Object The entity object containing information on the entity on which the Decision was taken.
 decision -  Object The Decision object containing information on the Decision taken.
 time -  Long The time the Decision was applied, as a UNIX timestamp in milliseconds.


 entity type -  String The type of entity on which the Decision was taken. Possible Values
- user This entity is a user and so the following id field will be a $user_id .
- order This entity is an order and so the following id field will be an $order_id .
- session This entity is a session and so the following id field will be an $session_id .
- content This entity is a content and so the following id field will be a $content_id .
 entity id -  String The unique identifier of the entity on which the Decision was taken.
 entity user_id -  String The user's account ID according to your systems. Note: User IDs are case sensitive.
 entity external_entity_id -  String The external entity id is used for cases where we have a different entity id internally.


 decision id -  String The unique identifier of the Decision that was taken. This is generated by taking the first display
name provided for the Decision, replacing spaces with underscores, and concatenating it with the fraud
type for which this Decision is configured.  Note : You cannot have two Decisions with the same initial
display name for any given fraud type.
Version 1.2 Response

Please contact your account manager or support@sift.com to upgrade to this version.



---Curl
{
  "entity":{
    "id":"entityId",
    "user_id":"userId",
    "external_entity_id":"externalEntityId",
    "type":"order"
  },
  "decision":{
    "id":"approved_decision_id",
    "title":"approved",
    "category":"accept"
  },
  "source":{
    "applied_from_type":"review queue"
  },
  "workflow":{
    "run_id":"workflowRunId1",
    "config":{
      "id":"workflowId1",
      "name":"testWorkflowName",
      "version":345613513
    },
    "route":{
      "id":"edgeId1",
      "name":"route 1"
    },
    "manual_review_queue":{
      "name":"queueName"
    }
  },
  "event":{
    "session_id":"session-id-1234",
    "order_id":"order-id-1234",
    "transaction_id":"transaction-id-1"
  },
  "analyst_email":"analyst@domain.com",
  "time":1665435261
}

---


Version 1.2 Response Fields


 entity -  Object The entity object containing information on the entity on which the Decision was taken.
 decision -  Object The Decision object containing information on the Decision taken.
 workflow -  Object The Workflow object containing the workflow information.
 source -  Object The Source object containing information on how the decision was made.
 event -  Object Event data associated to the decision. These fields will be provided when they are available.
 analyst_email -  String The email of the analyst that applied the decision.
 time -  Long The time the Decision was applied, as a UNIX timestamp in milliseconds.


 entity id -  String The unique identifier of the entity on which the Decision was taken.
 entity user_id -  String The user's account ID according to your systems. Note: User IDs are case sensitive.
 entity external_entity_id -  String The external entity id is used for cases where we have a different entity id internally.
 entity type -  String The type of entity on which the Decision was taken. Possible Values
- user This entity is a user and so the following id field will be a $user_id .
- order This entity is an order and so the following id field will be an $order_id .
- session This entity is a session and so the following id field will be an $session_id .
- content This entity is a content and so the following id field will be a $content_id .


 decision id -  String The unique identifier of the Decision that was taken. This is generated by taking the first display
name provided for the Decision, replacing spaces with underscores, and concatenating it with the fraud
type for which this Decision is configured.  Note : You cannot have two Decisions with the same initial
display name for any given fraud type.
 decision title -  String The title of the decision which can be seen in the Sift Console.
 decision category -  String The category of decision. Possible Values
- accept
- watch
- block


 workflow run_id -  String The workflow run unique identifier.
 workflow config -  Object The Workflow Config object containing the workflow configuration.
 workflow route -  Object The Workflow Route containing the first route triggered by the workflow.
 workflow manual_review_queue -  Object The Manual Review Queue object containing manual review queue information.


 workflow config id -  String The workflow configuration identifier.
 workflow config name -  String The workflow configuration name.
 workflow config version -  String The workflow configuration version.


 workflow route id -  String The workflow route identifier.
 workflow route name -  String The workflow route name.


 workflow manual_review_queue name -  String The manual review queue name.


 source applied_from_type -  String The location where this decision was applied. Possible Values
- console The decision was applied from the Console.
- api The decision was applied from the API.
- workflow The decision was applied from a Workflow.
- review queue The decision was applied from a Review Queue.


 event order_id -  String The ID for the order.
 event transaction_id -  String The ID for the transaction.
 event session_id -  String The ID for the session.
 event content_id -  String The ID for the content.
Now that you know what to expect from your Decision Webhooks, you need to authenticate that they are indeed
coming from Sift and meant for you.  We'll cover this in the next section.


Authentication

Take advantage of webhook authentication to ensure that the request you receive is coming from Sift.
Notes :
- There can only be one active webhook key per account.
- Generate your key on the Production API Keys page of your console .
- The Production key is used for your Sandbox account.
- The Signature will appear in the http header of the webhook request as 'X-Sift-Science-Signature'.



---Curl
Switch to one of the programming language tabs for the specific language implementation of webhook signature verification.

---


---Python
import json
from hashlib import sha1
import hmac

from flask import request

SIFT_WEBHOOK_SECRET_KEY = "#####"

@app.route("/webhook")
def webhook():
  # Let's check whether this webhook actually came from Sift!
  # First let's grab the signature from the postback's headers
  postback_signature = request.get("X-Sift-Science-Signature")

  # Next, let's try to assemble the signature on our side to verify
  postback_body = json.dumps(request.json)

  h = hmac.new(SIFT_WEBHOOK_SECRET_KEY, postback_body, sha1)
  verification_signature = "sha1={}".format(h.hexdigest())

  if verification_signature == postback_signature:
    process_webhook()
  else:
    raise SomeException()

---


---Ruby
require 'json'
require 'openssl'
require 'sinatra'

SIFT_WEBHOOK_SECRET_KEY = "#####"

post '/webhook' do
  # Let's check whether this webhook actually came from Sift!
  # First let's grab the signature from the postback's headers
  postback_signature = request.env['X-Sift-Science-Signature']

  # Next, let's try to assemble the signature on our side to verify
  digest  = OpenSSL::Digest.new('sha1')
  calculated_hmac = OpenSSL::HMAC.hexdigest(digest, SIFT_WEBHOOK_SECRET_KEY, request.body)
  verification_signature = "sha1=#{calculated_hmac}"

  if verification_signature == postback_signature
    puts "success"
  else
    raise Exception
  end
end

---


---PHP
SIFT_WEBHOOK_SECRET_KEY = "#####";
BLOCK_ACTION = 'block'; #name of the Action you set up in the console

# Let's check whether this webhook actually came from Sift!
# First let's grab the signature from the postback's headers
$webhookSignature = $headers['X-Sift-Science-Signature'];

# Next, let's try to assemble the signature on our side to verify
$verificationSignature  = "sha1=" . hash_hmac('sha1', $requestBody, $SIFT_WEBHOOK_SECRET_KEY);

if ($webhookSignature == $verificationSignature) {
  $siftRequest = json_decode($requestBody);
  if ($siftRequest->action->id == BLOCK_ACTION) {
    ...
  }
}

---


---Java
import org.apache.commons.codec.digest.HmacUtils;

String SIFT_WEBHOOK_SECRET_KEY = "#####";
// Get the "X-Sift-Science-Signature" request header.
String webhookSignature = requestHeaders.get("X-Sift-Science-Signature");
String verificationSignature = "sha1=" + HmacUtils.hmacSha1Hex(
    SIFT_WEBHOOK_SECRET_KEY.getBytes(),
    requestBody);

if (!webhookSignature.equals(verificationSignature)) {
    // Handle unauthenticated webhook
}
---




Workflows API Overview

The final, and most important step to integrating with Sift is to write 
business logic that makes Decisions based on the Sift Risk Score. Workflows allow
you to write and evaluate this logic in Sift. For example, you can setup a 
Workflow that evaluates whenever a user creates an account. You can specify 
criteria (e.g. country = "Canada" and Sift Score > 80) that when met, Sift will 
auto-block, auto-accept, or send the user to a Sift Review Queue for manual review. 
The configuration is all up to you, and logic can be updated in the console.
Please read our Creating a Workflow tutorial, which will walk you through the process of creating Workflows and attaching Decisions/Review Queues 
to them.
Workflows Integration
To successfully integrate with Workflows, you need to send the trigger event to Sift 
, and ingest the Workflow Decision. There are two ways to consume Workflow 
Decisions:
-  Synchronously when you send Sift any REST API event using the return_workflow_status=true URL parameter. This is best for when you need to know the output of the Workflow immediately after the 
triggering event occurs to make a time sensitive decision.
- Asynchronously if you send the trigger event to Sift without any 
parameters, the Workflow will run asynchronously. This is best for when you don't need to take action 
immediately after the triggering event occurs. In this scenario you will need to set up your 
Workflow Decisions with webhooks to successfully consume the output of the Workflow. Additionally note that if 
you have set up your Workflow to only run with API request, you must send the Workflow trigger event 
with the force_workflow_run=true parameter to ensure that the workflow executes asynchronously.
If your workflow includes Review Queues, you will need to configure Webhooks on the queue 
Decisions. Also note that you can both run a Workflow synchronously, and receive Webhooks. This is a common 
case for Workflows that both auto block some users and queue medium risk users in the review queue.
Response


 status -  Integer Success or Error Code of the event ingestion.
 error_message -  String
 request -  String The event you sent
 time -  Integer Time event was processed
 score_response -  Object


 score_response status -  Integer Success or Error Code of the re-score.
 score_response error_message -  String
 score_response user_id -  String
 score_response scores -  Scores Map
 score_response latest_labels -  Latest Labels Map
 score_response workflow_statuses -  Object A list of objects containing the responses of any 
Workflows that were triggered by this event. There will be one list item per Workflow triggered. 
If the Workflow has a fatal error, or there is no running Workflow configured for this event, 
the object will be empty.


 score_response workflow_statuses id -  String The run ID of this specific Workflow run. Pass to the Workflow Status API to view the latest Workflow Status for this ID.
 score_response workflow_statuses state -  String The state of this Workflow run. When you request a status synchronously, the workflow will either be running or failed . If it is running , but the history includes a 
Decision, there will be no further updates.
 score_response workflow_statuses config -  Object Details about the Workflow ID and version.
 score_response workflow_statuses config_display_name -  String The Workflow's current display name
 score_response workflow_statuses abuse_types -  String A list of abuse types of the Decisions this Workflow can apply. Possible Values are payment_abuse , promotion_abuse , content_abuse , account_abuse , account_takeover , 
and legacy .
 score_response workflow_statuses entity -  Object Information about the entity that this Workflow is Deciding on.
 score_response workflow_statuses history -  Object A list of apps/stages that have occurred in the Workflow run.
 score_response workflow_statuses route -  Object The route information of the app.


 score_response workflow_statuses config id -  String The static, unique identifier ID of the Workflow
 score_response workflow_statuses config version -  String The version of this Workflow. This updates each time the Workflow logic is updated


 score_response workflow_statuses entity type -  String The type of entity on which the Decision was taken. Possible Values are user , order , content , or session
 score_response workflow_statuses entity id -  String The unique identifier of the entity on which the Decision was taken.


 score_response workflow_statuses history app -  String The type of app which was run. Values include decision , review queue , order , user , content , session , and event . Decision is the final stage in a Workflow so a Workflow is complete when the Decision app is 
reached. review_queue means the item is queued in the Sift Console waiting
for an analyst decision. The other options are internal apps, indicating the event was processed,
and the apps indicate the entity was scored by our Machine Learning system.
 score_response workflow_statuses history name -  String The display name of the app which was run.
 score_response workflow_statuses history state -  String The state of this app. Options are either running , finished , or failed .
 score_response workflow_statuses history config -  Object The configuration information of the app.


 score_response workflow_statuses history config decision_id -  String The unique identifier of the Decision taken in this app.
This will only be returned if the app is a decision app.
 score_response workflow_statuses history config buttons -  Object A list of Decision buttons currently configured in the Review Queue.


 score_response workflow_statuses history config buttons id -  String The unique Decision ID for this button.
 score_response workflow_statuses history config buttons name -  String The display name for this button.


 score_response workflow_statuses route name -  String The display name of the route.


Asynchronous Workflows

If you have a running Workflow configured in the Sift Console, 
and you send the Workflow trigger event without setting return_workflow_status=true , the Workflow will run asynchronously. 
See Events API to see how to send events to Sift. 
Workflows that are ran asynchronously, and Workflows that use Review Queues require
Webhooks to receive the final Decision.
To receive Decision Webhooks, just add a Webhook URL to the Decisions used in your Workflow, 
and see Decision Webhooks documentation.
If your Workflow is configured to only run on API Request , you will 
need to include force_workflow_run=true to run the Workflow asynchronously.
Response


 id -  String The run ID of this Workflow, identifying this specific instance of the Workflow.
 state -  String The state of this Workflow instance. Possible Values
- running This Workflow instance is still running, either because it is still sending the webhook or the 
user/order was put into a manual review queue
- finished This Workflow instance is finished running and there is a Decision associated with it in the 
history section discussed below
- failed This Workflow instance has failed to run.
 config -  Object An object containing the configuration information for this Workflow.
 config_display_name -  String The display name given to this Workflow in the Workflow editor.
 abuse_types -  String A list of abuse types of the Decisions this Workflow can apply. Possible Values are payment_abuse , promotion_abuse , content_abuse , account_abuse , account_takeover , 
and legacy .
 entity -  Object Information about the entity that this Workflow is Deciding on.
 history -  Object A list of apps objects that have occurred in the Workflow run.  You can think of these as Workflow stages.


 config id -  String The configuration ID of the Workflow.  This is the unique identifier of this Workflow, but not 
this Workflow instance.
 config version -  String The version of this Workflow.


 entity type -  String The type of entity on which the Decision was taken. Possible Values are user , order , content , or session
 entity id -  String The unique identifier of the entity on which the Decision was taken.


 history app -  String The type of app which was run.                   
The type of app which was run. Values include decision , review queue , order , user , content , session , and event .  Decision is the final stage in a Workflow so a Workflow is complete when the Decision app is 
reached. review queue means the item is queued in the Sift Console waiting
for an analyst decision. The other options are internal apps, indicating the event was processed,
and the apps indicate the entity was scored by our Machine Learning system.
 history name -  String The app display name.
 history state -  String The state of this app. The possible values are running , finished , or failed
 history config -  Object The configuration information of the app.


 history config decision_id -  String The unique identifier of the Decision taken in this app.
This field only exists if the app type is decision .
 history config buttons -  Object A list of button objects associated with the review queue .


 history config buttons id -  String The unique Decision ID for this button.
 history config buttons name -  String The display name for this button.


Score API Overview

The Sift APIs give you multiple ways to get a risk score for any of your users. 
A risk score is a measure of how likely a user is to commit abuse using your service. 
Scores are computed in real time from the data sent via the Events API and the Sift Javascript snippet.
Sift calculates risk scores for six types of abuse:
- Payment Abuse - A user fraudulently using a credit card or other payment method.
- Content Abuse - A user creating content (e.g. spammy/scammy posts) or sending messages 
on your site in an abusive manner.
- Promotion Abuse - A user gaming the terms of a promotion in an excessive or abusive way.
- Account Abuse - A user using your service in a manner you deem abusive (e.g. fake accounts).
-  Account Takeover - the risk that an account is accessed through stolen credentials
- Legacy - this is a legacy version of the Sift Score that scored users for custom fraud types, 
similar to the Account Abuse score.
You can get one or more of these abuse scores at a time. We will calculate scores for any of the abuse 
detection products you’ve enabled. Here is the pricing for our abuse prevention products.
There are four different ways to get scores from Sift:


Getting risk scores synchronously when sending events

Whenever you send an event, you can receive a Sift Score back synchronously in the response back from the API. 
This is particularly useful for when you are sending an event that maps to a key decision point for your 
business. Typically, customers find it most useful to get scores back after creating an account, order, 
content, or adding a promotion, but you can get scores back after passing any of the events we support.
For events that you don't plan on using the score, it’s best that you don’t ask for the score as it will add 
some latency to the request.
Request

To get scores back when sending an event, just append the query parameter return_score=true to your API request. 
You can also request scores for specific abuse types using the abuse_types query parameter.
If you are an existing customer who has not yet upgraded to our abuse-specific scores, you will need to 
set abuse_types to legacy to get a score.
Response


 status -  Integer The success or error code (see relevant error codes below).
 error_message -  String Description of status code.
 request -  String The content of the event you sent.
 time -  Integer The time the request was processed, in seconds since epoch.
 score_response -  Object The requested scoring information for the given user.


 score_response status -  Integer The success or error code (see relevant error codes below).
 score_response error_message -  String Description of error if applicable.
 score_response scores -  Map The scores map contains all computed scores for all applicable abuse types for a given user. 
The map is keyed by abuse type, which could be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse , account_takeover . The values in this map 
are objects which contain the following fields:
 score_response user_id -  String The id of the user, matching what was passed in the Score API call.
 score_response latest_labels -  Map NOTE: Latest Labels section is only intended for customers using the Labels API.  The latest_labels map contains entries for all abuse types for which the given event has been labeled. 
Note that the content of this map is not subject to the abuse types specified in the request; we always 
include all labels that have been applied to the given user ID. The map is keyed by abuse type, which could 
be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse . 
The values in this map are objects which contain the following fields:


 score_response scores score -  Float Score for the user between 0.0 and 1.0.  A score of 0.5 translates to a score a 50 in the console.
 score_response scores reasons -  Array A list of the most significant reasons for the score and the values associated with the user. 
The included values will vary based on the user. Includes related users in the details object when applicable.


 score_response scores reasons name -  String Name of the risk signal.
 score_response scores reasons value -  String Value of the risk signal.
 score_response scores reasons details -  Object Additional details. Provided only when relevant. E.g., may contain a details field 
which contains the IDs of related users.


 score_response latest_labels is_fraud -  Boolean  true if the user is labeled Fraud, false if the user is labeled Not Fraud.
 score_response latest_labels time -  Long  The time this label was applied to the user. It is a UNIX timestamp in seconds.
 score_response latest_labels description -  String  Freeform text description of the user and/or incident triggering the label.


Error Codes

Possible status codes

- -4 Service currently unavailable. Please try again later.
- -3 Server-side timeout processing request. Please try again later.
- -2 Unexpected server-side error
- -1 Unexpected server-side error
- 0 OK
- 51 Invalid API key
- 54 Specified user_id has no scoreable events
- 60 Rate limited; too many events have been received in a short period of time


Get Scores API Reference

The Get Scores API is meant to retrieve the latest risk score Sift has computed. This is useful for when there 
is not a natural user event to send, but you would like to see the risk score before making a decision. Some 
examples of when you may want to check the score are before:
- Shipping out a package
- Finalizing a money transfer
- Giving access to a prearranged vacation rental
- Approving an order in your review tool
If you need a score back quickly after a user event, we can provide scores synchronously when events are sent. You 
can also synchronously get the status of a workflow and the score when you send an event.
- You can only pull the score for a user we've received Events API events or JavaScript activity for.
- Use your Sandbox REST API key for accessing Sandbox users when testing. Switch to your Production API key for 
your live integration.
Request

Request scores for a user and abuse types using the (optional) abuse_types query parameter.
Response


 status -  Integer The success or error code (see relevant error codes below).
 error_message -  String Description of error if applicable.
 scores -  Map The scores map contains the computed scores for all applicable abuse types. The map is keyed by 
abuse type, which could be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse . The values in this map are objects which contain the following fields:
 entity_type -  String What type of entity is the score in reference to. This defaults to user .
 entity_id -  String The id for which the score was requested.
 latest_decisions -  Map The latest_decisions map contains entries for all abuse types for which Decisions have been 
applied on the given entity. Note that the content of this map is not subject to the abuse types specified 
in the request; we always include all Decisions that have been applied to the given entity. The map is 
keyed by abuse type, which could be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse , account_takeover . The values in this map are 
objects which contain the following fields:
 latest_labels -  Map NOTE: Latest Labels section is only intended for customers using the Labels API.  The latest_labels map contains entries for all abuse types for which the given event has been labeled. 
Note that the content of this map is not subject to the abuse types specified in the request; we always 
include all labels that have been applied to the given user ID. The map is keyed by abuse type, which could 
be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse . 
The values in this map are objects which contain the following fields:


 scores score -  Float Score for the user between 0.0 and 1.0.  A score of 0.5 translates to a score a 50 in the console.
 scores time -  Long The time at which the score was generated, as a UNIX timestamp.
 scores reasons -  Array A list of the most significant reasons for the score and the values associated with the user. 
The included values will vary based on the user. Includes related users in the details object when applicable.


 scores reasons name -  String Name of the risk signal.
 scores reasons value -  String Value of the risk signal.
 scores reasons details -  Object Additional details. Provided only when relevant. E.g., may contain a details field 
which contains the IDs of related users.


 latest_decisions  -  id
 latest_decisions  -  String The id of the Decision that was applied.
 latest_decisions type -  String One of the following: BLOCK , WATCH , ACCEPT
 latest_decisions source -  String The source of this Decision. One of the following: AUTOMATED_RULE , MANUAL_REVIEW , CHARGEBACK
 latest_decisions time -  Long The time the Decision was applied, as a UNIX timestamp.
 latest_decisions description -  String The description of the Decision, if available.


 latest_labels is_fraud -  Boolean  true if the user is labeled Fraud, false if the user is labeled Not Fraud.
 latest_labels time -  Long  The time this label was applied to the user. It is a UNIX timestamp in seconds.
 latest_labels description -  String  Freeform text description of the user and/or incident triggering the label.


Error Codes

Possible status codes

- -4 Service currently unavailable. Please try again later.
- -3 Server-side timeout processing request. Please try again later.
- -2 Unexpected server-side error
- -1 Unexpected server-side error
- 0 OK
- 51 Invalid API key
- 54 Specified user_id has no scoreable events
- 60 Rate limited; too many events have been received in a short period of time
- 64 Specified user does not have a previously computed score.


Re-score API Reference

The Re-score API is meant to force the computation of a new Sift score. This is useful for when there is not a 
natural user event to send, but you would like to update and retrieve the risk score based on user activity that 
you know to have occurred since the last time the score was computed. If you do not believe that the user has had
any activity since the last score computation, we recommend using the Get Scores API .
We do not recommend sending event data for a user and then very quickly attempting to get the score back with the 
Re-score API. If you need a score back quickly after an event, we can provide scores synchronously when events are sent. You 
can also synchronously get the status of a workflow and the score when you send an event.
- You can only pull the score for a user we've received Events API events or JavaScript activity for.
- Use your Sandbox REST API key for accessing Sandbox users when testing. Switch to your Production API key for 
your live integration.
Request

Request scores for a user and abuse types using the (optional) abuse_types query parameter
Response


 status -  Integer The success or error code (see relevant error codes below).
 error_message -  String Description of error if applicable.
 scores -  Map The scores map contains the computed scores for all applicable abuse types. The map is keyed by 
abuse type, which could be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse . The values in this map are objects which contain the following fields:
 entity_type -  String What type of entity is the score in reference to. This defaults to user .
 entity_id -  String The id for which the score was requested.
 latest_decisions -  Map The latest_decisions map contains entries for all abuse types for which Decisions have been 
applied on the given entity. Note that the content of this map is not subject to the abuse types specified 
in the request; we always include all Decisions that have been applied to the given entity. The map is 
keyed by abuse type, which could be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse , account_takeover . The values in this map are 
objects which contain the following fields:
 latest_labels -  Map NOTE: Latest Labels section is only intended for customers using the Labels API.  The latest_labels map contains entries for all abuse types for which the given event has been labeled. 
Note that the content of this map is not subject to the abuse types specified in the request; we always 
include all labels that have been applied to the given user ID. The map is keyed by abuse type, which could 
be one of: payment_abuse , account_abuse , content_abuse , promotion_abuse . 
The values in this map are objects which contain the following fields:


 scores score -  Float Score for the user between 0.0 and 1.0.  A score of 0.5 translates to a score a 50 in the console.
 scores time -  Long The time at which the score was generated, as a UNIX timestamp.
 scores reasons -  Array A list of the most significant reasons for the score and the values associated with the user. 
The included values will vary based on the user. Includes related users in the details object when applicable.


 scores reasons name -  String Name of the risk signal.
 scores reasons value -  String Value of the risk signal.
 scores reasons details -  Object Additional details. Provided only when relevant. E.g., may contain a details field 
which contains the IDs of related users.


 latest_decisions  -  id
 latest_decisions  -  String The id of the Decision that was applied.
 latest_decisions type -  String One of the following: BLOCK , WATCH , ACCEPT
 latest_decisions source -  String The source of this Decision. One of the following: AUTOMATED_RULE , MANUAL_REVIEW , CHARGEBACK
 latest_decisions time -  Long The time the Decision was applied, as a UNIX timestamp.
 latest_decisions description -  String The description of the Decision, if available.


 latest_labels is_fraud -  Boolean  true if the user is labeled Fraud, false if the user is labeled Not Fraud.
 latest_labels time -  Long  The time this label was applied to the user. It is a UNIX timestamp in seconds.
 latest_labels description -  String  Freeform text description of the user and/or incident triggering the label.


Error Codes

Possible status codes

- -4 Service currently unavailable. Please try again later.
- -3 Server-side timeout processing request. Please try again later.
- -2 Unexpected server-side error
- -1 Unexpected server-side error
- 0 OK
- 51 Invalid API key
- 54 Specified user_id has no scoreable events
- 60 Rate limited; too many events have been received in a short period of time
- 64 Specified user does not have a previously computed score.
- 100 Required fields missing
- 111 Feature disabled
- 112 Abuse product disabled


Verification API Guide

Sift's two-factor authentication solution enables triggering one-time
passcodes for risky login attempts based
on our ATO risk score. Configuration includes integrating with
our Verification API as well as an in-console setup. The in-console setup
involves creating 2FA sms/email templates and generating CNAMEs to update your DNS
records so we can send emails on your behalf.
This service is intended to be used to send OTPs to email addresses
and/or phone numbers that have already been validated as real and able
to be accessed by the account owners. This service is not designed to validate the ability
to deliver messages to a phone number or email address.


Check

The /check call is used for sending the OTP provided by the end user to Sift. Sift then checks the validity of the OTP, checks rate limits, and responds with a decision whether the user should be able to proceed or not.
Use Sift's response to determine what action to take:
- If the user was successfully verified, then let the user log in to the site.
- If the user failed to verify (wrong code, too many attempts, etc.), then present an error message to the user.
The message should inform the user what to do next ("click resend and try again" or "wait for minutes and try again")
Authenticate your requests using the Basic HTTP Authorization scheme with your production API key as the user_id: Authorization: Basic base_64_encode(production_api_key + ":")
Request


 user_id -  required · String User ID of user being verified, e.g. johndoe123.
 code -  required · String The code the user sent to the customer for validation.
 verified_event -  String (enum) This will be the event type that triggered the verification. Possible values are $add_item_to_cart , $add_promotion , $content_status , $create_account , $create_content , $create_order , $flag_content , $login , $order_status , $remove_item_from_cart , $transaction , $transaction , $update_account , $update_content , $update_order and $update_password .
 verified_entity_id -  String The ID of the entity impacted by the event being verified.
Response


 status -  Integer The success or error code (see relevant error codes below).
 error_message -  String Human readable description of the error.
 checked_at -  Integer The time the OTP verified, as a UNIX timestamp in milliseconds.


Resend

A user can ask for a new OTP (one-time password) if they haven’t received the previous one, or in case the
previous OTP expired. The /resend call generates a new OTP and sends it to the  original recipient with the
same settings (template, verified event info, verification type).
Authenticate your requests using the Basic HTTP Authorization scheme with your production API key as the user_id: Authorization: Basic base_64_encode(production_api_key + ":")
Request


 user_id -  required · String User ID of user being verified, e.g. johndoe123.
 verified_event -  String (enum)  This will be the event type that triggered the verification. Possible values are $add_item_to_cart , $add_promotion , $content_status , $create_account , $create_content , $create_order , $flag_content , $login , $order_status , $remove_item_from_cart , $transaction , $transaction , $update_account , $update_content , $update_order and $update_password .
 verified_entity_id -  String The ID of the entity impacted by the event being verified.
Response


 status -  Integer The success or error code (see relevant error codes below).
 error_message -  String Human readable description of the error.
 send_at -  Integer The time the OTP was sent, as a UNIX timestamp in milliseconds.


Send

Sift strongly recommends using Verification with Workflows. However, you may want to use the /send endpoint
for testing purposes. The /send endpoint initiates a user’s 2FA flow: it triggers the generation of a OTP
code that is stored by Sift and emails the code to the user. It will also produce a pending
$verification event in the user’s activity log.
Authenticate your requests using the Basic HTTP Authorization scheme with your production API key as the user_id: Authorization: Basic base_64_encode(production_api_key + ":")
Request


 user_id -  required · String User ID of user being verified, e.g. johndoe123
 send_to -  required · String The phone number or email address to send the OTP to. The value in this field must match verification_type.
If this field contains a phone number, it should be in E.164 format including + and a country code.
 event.$session_id -  required · String The session being verified. See $verification in the Sift Events API documentation.
 verification_type -  required · String The channel used for verification. Should be either $email or $sms .
 verified_entity_id -  String The ID of the entity impacted by the event being verified.
 event.$verified_event -  required · String The type of the reserved event being verified.
 brand_name -  String Name of the brand of product or service the user interacts with.
 site_country -  String Country of the content of the site.
 (FOR APP) event.$app.$client_language -  String (Locale: enum of ISO 639-1 language codes) Language the application content is being delivered in.
 (FOR BROWSER) event.$browser.$content_language -  String (Locale: enum of ISO 639-1 language codes) Language of the content of the web site.
 event.$ip -  String The user’s IP address
 event.$browser -  Sift Browser object The user agent of the browser that is verifying. Represented by the $browser object.
Use this field if the client is a browser.
Note: cannot be used in conjunction with $app.
 event.app -  Sift App object The details of the app, OS, and device that is verifying. Represented by the $app object.
Use this field if the client is an app.
Note: cannot be used in conjunction with $browser.
 event.$reason -  String The trigger for the verification. See $verification in the Sift Events API documentation.
Response


 status -  Integer The success or error code (see relevant error codes below).
 error_message -  String Human readable description of the error.
 send_at -  Integer The time the OTP was sent, as a UNIX timestamp in milliseconds.


Device Fingerprinting Integration Guide

The Device Fingerprinting API is a separate product from our machine learning products. 
Our machine learning uses device fingerprints in making risk assessments and connecting
fraudulent users, but does not provide access to this API. For an overview and a use 
case example, see our Device Fingerprinting API tutorial .
Using the Device Fingerprinting API requires that you have installed our JavaScript snippet .


Device Information

GET   /v3/accounts/{accountId}/devices/{deviceId}


You can use the data returned from this endpoint to help
investigate suspicious devices. Data like the first time you've
seen a device in addition to how the Sift network
has labeled a device can help you determine whether to allow
a user to continue interacting with your site.




---Curl
Example Request$ curl -XGET 'https://api.sift.com/v3/accounts/{id}/devices/{id}' \n  -H 'Content-Type: application/json' \n  -u {API_KEY}:Example Response{
  "id" : "{id}",
  "label" : "fraud",
  "labeled_at" : 1241241214000,
  "first_seen" : 1412990802000,
  "users" : {
    "data" : [ {
      "id" : "bob123",
      "href" : "https://api.sift.com/v3/accounts/{id}/users/bob123"
    } ]
  },
  "network" : {
    "first_seen" : 1412386033000,
    "score" : 0.8
  },
  "sessions" : {
    "has_more" : false,
    "total_results" : 1,
    "data" : [ {
      "time" : 1412990802000
    } ]
  }
}
---



Parameters


 accountId -  required · string Your Sift Account ID, which can be found in the Sift Console under the Developer Tab
 deviceId -  required · string A device fingerprint is an identifier that represents a device.
Response


 id -  required · string A device fingerprint is an identifier that represents a device.
 first_seen -  integer The time (represented as POSIX time in milliseconds) when Sift first identified this device on your site
 users -  object A list of references to external entities that this object is associated with
 sessions -  object A list of sessions in which this device has been seen
 label -  string The label applied to this device. If no label has been applied, this field is undefined Allowed Values
- fraud This device has exhibited behavior that is fraudulent or otherwise detrimental to your business
- not_fraud This device is not fraudulent
 labeled_at -  integer The time at which the latest label was applied to this device. If no label has been applied, this field is null
 network -  object Data from our network of customers can help you make decisions on devices you've never seen before or haven't yet exhibited suspicious behavior.


 users data -  required · array The list of data elements
 users has_more -  boolean True if there are more data elements available
 users next_ref -  string A link to the next set of data elements, if available
 users total_results -  integer The total number of results, if known


 users data id -  required · string id of the referenced resource


 sessions data -  required · array A list of data related to sessions in which this device has been seen
 sessions has_more -  boolean True if there are more sessions available
 sessions next_ref -  string A link to the next set of sessions, if available
 sessions total_results -  integer The total number of results, if known


 sessions data time -  integer The time at which this Session ID was first set in the Sift JavaScript snippet.


 network first_seen -  integer The time (represented as POSIX time in milliseconds) when Sift first identified this device within our network of customers.
 network score -  number A representation of how likely this device is fraud based on labels we've received from our network of customers. The range of values is 0 to 1, where 1 represents a device that almost certainly is fraud.
 network pervasiveness -  string NOT YET AVAILABLE. A representation of how often Sift has seen this device in our network of customers. You might consider scores where pervasiveness is 'low' less strongly than scores where pervasiveness is 'medium' or 'high'. Allowed Values
- low
- medium
- high



Label a Device

PUT   /v3/accounts/{accountId}/devices/{deviceId}/label


Use this endpoint to flag devices as either "fraud" or "not_fraud".
Most likely you will need to link some concept of a user (e.g. email address or user id)
to a Device Fingerprint at some point in your product flow. Then, when you find a
user to be fraudulent, you should use this endpoint to flag the device the
user originated from. You will prevent this device from interacting from your
site using the /v3/accounts/{accountId}/session endpoint.




---Curl
Example Request$ curl -XPUT 'https://api.sift.com/v3/accounts/{id}/devices/{id}/label' \n  -H 'Content-Type: application/json' \n  -u {API_KEY}: \n  -d '{
  "label" : "fraud"
}'Example Response{
  "label" : "fraud"
}
---



Parameters


 accountId -  required · string Your Sift Account ID, which can be found in the Sift Console under the Developer Tab
 deviceId -  required · string A device fingerprint is an identifier that represents a device.
Entity


 label -  string  Allowed Values
- fraud This device has exhibited behavior that is fraudulent or otherwise detrimental to your business
- not_fraud This device is not fraudulent
Response


 label -  string  Allowed Values
- fraud This device has exhibited behavior that is fraudulent or otherwise detrimental to your business
- not_fraud This device is not fraudulent



Session Information

GET   /v3/accounts/{accountId}/sessions/{sessionId}


Call this endpoint to determine whether you should allow the device
seen for a given session id to continue interacting with your site.
Embedded in the response is whether you've seen this device before as well as
how you've labeled the device, if at all. If you've labeled a Device Fingerprint "fraud"
in the past, you should most likely restrict this device's ability to interact
with your site.




---Curl
Example Request$ curl -XGET 'https://api.sift.com/v3/accounts/{id}/sessions/465733823' \n  -H 'Content-Type: application/json' \n  -u {API_KEY}:Example Response{
  "id" : 465733823,
  "time" : 1412990802000,
  "device" : {
    "id" : "{id}",
    "label" : "fraud",
    "labeled_at" : 1241241214000,
    "first_seen" : 1412990802000,
    "network" : {
      "first_seen" : 1412386033000,
      "score" : 0.8
    },
    "sessions" : {
      "total_results" : 1,
      "has_more" : false,
      "data" : [ {
        "time" : 1412990802000
      } ]
    }
  }
}
---



Parameters


 accountId -  required · string Your Sift Account ID, which can be found in the Sift Console under the Developer Tab
 sessionId -  required · string Session IDs should be initially set in our JavaScript snippet. Use the same session id to retrieve the device associated with this session. You should only call this endpoint from your server, and not from the client.
Response


 time -  integer The time at which this Session ID was first set in the Sift JavaScript snippet.
 device -  object Data related to a Device Fingerprint


 device id -  required · string A device fingerprint is an identifier that represents a device.
 device first_seen -  integer The time (represented as POSIX time in milliseconds) when Sift first identified this device on your site
 device users -  object A list of references to external entities that this object is associated with
 device sessions -  object A list of sessions in which this device has been seen
 device label -  string The label applied to this device. If no label has been applied, this field is undefined Allowed Values
- fraud This device has exhibited behavior that is fraudulent or otherwise detrimental to your business
- not_fraud This device is not fraudulent
 device labeled_at -  integer The time at which the latest label was applied to this device. If no label has been applied, this field is null
 device network -  object Data from our network of customers can help you make decisions on devices you've never seen before or haven't yet exhibited suspicious behavior.


 device users data -  required · array The list of data elements
 device users has_more -  boolean True if there are more data elements available
 device users next_ref -  string A link to the next set of data elements, if available
 device users total_results -  integer The total number of results, if known


 device users data id -  required · string id of the referenced resource


 device sessions data -  required · array A list of data related to sessions in which this device has been seen
 device sessions has_more -  boolean True if there are more sessions available
 device sessions next_ref -  string A link to the next set of sessions, if available
 device sessions total_results -  integer The total number of results, if known


 device sessions data time -  integer The time at which this Session ID was first set in the Sift JavaScript snippet.


 device network first_seen -  integer The time (represented as POSIX time in milliseconds) when Sift first identified this device within our network of customers.
 device network score -  number A representation of how likely this device is fraudulent based on labels we've received from our network of customers. The range of values is 0 to 1, where 1 represents a device that almost certainly is fraudulent.
 device network pervasiveness -  string NOT YET AVAILABLE. A representation of how often Sift has seen this device in our network of customers. You might consider scores where pervasiveness is 'low' less strongly than scores where pervasiveness is 'medium' or 'high'. Allowed Values
- low
- medium
- high



Device Information for Users

GET   /v3/accounts/{accountId}/users/{userId}/devices


Call this endpoint to determine the devices associated for a given user_id




---Curl
Example Request$ curl -XGET 'https://api.sift.com/v3/accounts/{id}/users/465733823/devices' \n  -H 'Content-Type: application/json' \n  -u {API_KEY}:Example Response{
  "data" : [ {
    "id" : "{id}",
    "href" : "https://api.sift.com/v3/accounts/{id}/devices/{id}"
  }, {
    "id" : "{id}",
    "href" : "https://api.sift.com/v3/accounts/{id}/devices/{id}"
  } ]
}
---



Parameters


 accountId -  required · string Your Sift Account ID, which can be found in the Sift Console under the Developer Tab
 userId -  required · string User IDs should be initially set in our JavaScript snippet. Use the same user ID to retrieve the devices associated with this user. You should only call this endpoint from your server, and not from the client.
Response


 schema -  required · string Reference to the json schema that the data in the array conforms to
 data -  required · array A list of data items
 has_more -  boolean Whether there are more results
 next_ref -  string A link to the next set of data, if available
 total_results -  integer The total number of results, if known


 data id -  required · string id of the referenced resource



Partner API


The Partner API allows e-commerce platforms, agencies, and payment
gateways/processors to programmatically create Sift
accounts for their own merchants, and to interact with those
accounts on behalf of their merchants.
Client libraries

We have written client libraries in
several languages to make using this API even easier.
Capabilities

Partners can:


- Create new Sift accounts on behalf of their customers


- List the set of accounts they have created, along with the API keys for those accounts.


- Submit events and labels, or request scores on behalf of their customers


Access

Before using the Partner API, please contact our partner support team and ask to be enabled as a partner.
The operations below will require two credentialing pieces of information:


- The Partner Account ID, which can be found in the "Settings" section of the Sift Console.


- The partner's Production REST API key which can be found in the "API Keys" console page.


Terminology

In the following document "partner" will be the organization which is creating and using Sift
accounts on behalf of a group of parties. We'll refer to those other parties as "merchants".
Authentication

All authentication is based on API keys.
When acting as a Partner

When doing partner-level or administrative actions (i.e. creating new accounts, configuring
notifications, or listing merchant accounts), the partner's API key should be included in the
request header under the Authorization key, with the Basic scheme. See the Account Creation
curl example below for a concrete example.
When acting on behalf of a Merchant

When performing actions at the level of a specific existing merchant account, use the API key
associated with that merchant (which is included in the response when the merchant's Sift
account is first created). When using the existing Events API or Labels API this will mean
placing this API key into the JSON body. When making requests against the Scores API, the API
key will appear as a query parameter.



Labels API Reference


Note

The Labels API is not recommended for customers signing up after February 1st, 2017.

Overview

The Labels API is a way to tell Sift which transactions or events are fraudulent or legitimate. By telling 
us this information, Sift can identify abuse patterns unique to your business.
Labels are used by the platform to generate the risk scores you within your application
to automate your fraud fighting.
Labels API is no longer recommended for new customers. Decisions are now
the recommended integration, they enable you to send more granular and powerful feedback 
to our machine learning system. Learn more about Decisions.
For customers already using Labels API, don't worry! It is still a supported integration method.
If you are interested in migrating to Decisions, please contact your account manager or support@sift.com and we can help.
How it Works

- Labeling events as fraudulent helps us determine other events that are likely to be fraudulent.
- Labeling events as legitimate is useful for when a user has a high score
but is known to be legitimate; it will help lower your false positive rate.
- If you want to change an existing label for a user ID - for example, from risky to valid 
- all you need to do is send a new label and we'll overwrite the existing value.
- If instead you want to remove labels, 
you can use our Unlabel API .
Note: you can find the documentation for the previous version of this API here .
Labeling a User

To label a user ID, send an HTTP POST to our Label API endpoint:
Be sure to replace INSERT_USER_ID with the ID of the user you are labeling. 
The response should have an HTTP status code of 200 and a status of 0 . See our Error Codes for more information on non-zero statuses.



---Curl
// Example curl request to label a user:
curl -X POST 'https://api.sift.com/v205/users/INSERT_USER_ID/labels' -d \n'{ 
  "$api_key"     : "YOUR_API_KEY", 
  "$is_fraud"      : true, 
  "$abuse_type"  : "payment_abuse",
  "$description" : "The user was testing cards repeatedly for a valid card", 
  "$source"      : "manual review", 
  "$analyst"     : "someone@your-site.com" 
}'

// Example of returned response:
{ 
  "time" : 1418757635 , 
  "status" : 0 , 
  "request" : 
  "{ 
  
      "$api_key"     : "YOUR_API_KEY", 
  
      "$is_fraud"      : true, 
  
      "$abuse_type"  : "payment_abuse", 
  
      "$description" : "The user was testing cards repeatedly for a valid card", 
  
      "$source"      : "manual review", 
  
      "$analyst"     : "someone@your-site.com" 

  }" ,
   "error_message" : "OK"
}

---


---Python
import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')

properties = {
  "$is_fraud"      : True, # ... or False; Required 
  "$abuse_type"  : "payment_abuse", # Required
  "$description" : "The user was testing cards repeatedly for a valid card", # Optional
  "$source"      : "manual review", # Optional
  "$analyst"     : "someone@your-site.com" # Optional
}

response = client.label("billy_jones_301", properties)

---


---Ruby
require "sift"

client = Sift::Client.new(:api_key => "YOUR_API_KEY")

properties = {
  "$is_fraud"      => true, # ... or false; Required 
  "$abuse_type"  => "payment_abuse", # Required
  "$description" => "The user was testing cards repeatedly for a valid card", # Optional
  "$source"      => "manual review", # Optional 
  "$analyst"     => "someone@your-site.com" # Optional 
}

response = client.label("billy_jones_301", properties)

---


---PHP
require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => 'YOUR_API_KEY'));

$properties = array(
  '$is_fraud'      => true, // ... or false; Required Field
  '$abuse_type'  => 'payment_abuse', // Required
  '$description' => 'The user was testing cards repeatedly for a valid card', // Optional
  '$source'      => 'manual review', // Optional 
  '$analyst'     => 'someone@your-site.com' // Optional 
);

$response = $client->label('billy_jones_301', $properties);

---


---Java
import com.siftscience.SiftClient;
import com.siftscience.LabelRequest;
import com.siftscience.LabelResponse;
import com.siftscience.model.LabelFieldSet;

SiftClient client = new SiftClient("YOUR_API_KEY");
LabelRequest request = client.buildRequest(new LabelFieldSet()
        .setUserId("billy_jones_301")
        .setIsBad(true)
        .setAbuseType("payment_abuse")
        .setDescription("The user was testing cards repeatedly for a valid card")
        .setSource("manual review")
        .setAnalyst("someone@your-site.com"));

LabelResponse response;
try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
    return;
}
response.isOk(); // true


---



 $api_key -  required · String Your Sift API key.
 $is_fraud -  required · Boolean Indicates whether a user is engaging in behavior deemed harmful to your business. Set to true if the 
user is engaging in abusive activity. Set to false if the user is engaging in valid activity.
 $abuse_type -  required · String The type of abuse for which you want to send a label. It's important to send a label specific to the 
type of abuse the user is committing so that Sift can learn about specific patterns of behavior. 
You'll end up with more accurate results this way. Allowed values
- payment_abuse A user using stolen payment information (e.g. a stolen credit card) to purchase goods or services.
- content_abuse A user creating content or sending messages on your site in an abusive manner. This includes
spam posts that pollute your site, fake listings intended to scam other users, 
spammy messages to other users, and any other fraudulent or abusive content.
- promotion_abuse A user gaming the terms of a promotion in an excessive or abusive way. A promotion includes 
things like coupons, referral credits, limited offers, free trial periods, etc.
- account_abuse A user who uses your service in a manner you deem abusive. This behavior can include creating 
fake/duplicate accounts or any other abusive patterns specific to your business.
 $description -  String Freeform text description of the user and/or incident triggering the label. Useful as annotation 
on why the label was added.
 $source -  String String describing the original source of the label information (e.g. payment gateway, manual review, etc.).
 $analyst -  String Unique identifier (e.g. email address) of the analyst who applied the label. Useful for tracking 
purposes after the fact.


Unlabeling a User ID

If you are unsure whether a user ID is fraudulent or legitimate, you can always remove labels and leave the user 
in a neutral state. To unlabel a user for a particular abuse type, send an HTTP DELETE to our Labels API endpoint 
with the abuse_type query parameter:
This API call should return an HTTP status code of 204 .
In the rare case that you want to remove all labels for all abuse types for a particular user, send an HTTP 
DELETE to our Labels API endpoint without the abuse_type query parameter:
If you just want to change an existing label - for example, from fraudulent to legitimate - all you need to do 
is send a new label and we'll overwrite the existing value. Learn more about labeling a user .
Note: you can find the documentation for the previous version of this API here .



---Curl
// Example curl request to remove a payment abuse label:
curl -X DELETE 'https://api.sift.com/v205/users/USER_ID/labels/?api_key=YOUR_API_KEY&abuse_type=payment_abuse'
---


---Python
import sift

client = sift.Client(api_key='{apiKey}', account_id='{accountId}')
response = client.unlabel("billy_jones_301", abuse_type="payment_abuse")
---


---Ruby
require "sift"

client = Sift::Client.new(:api_key => "YOUR_API_KEY - production key if not testing")
response = client.unlabel("billy_jones_301", :abuse_type => "payment_abuse")
---


---PHP
require 'sift-php/lib/Services_JSON-1.0.3/JSON.php';
require 'sift-php/lib/SiftRequest.php';
require 'sift-php/lib/SiftResponse.php';
require 'sift-php/lib/SiftClient.php';
require 'sift-php/lib/Sift.php';

$client = new SiftClient(array('api_key' => 'YOUR_API_KEY - production key if not testing'));
$response = $client->unlabel('billy_jones_301', array('abuse_type' => 'payment_abuse'));
---


---Java
import com.siftscience.SiftClient;
import com.siftscience.UnlabelRequest;
import com.siftscience.UnlabelResponse;
import com.siftscience.model.UnlabelFieldSet;

SiftClient client = new SiftClient("YOUR_API_KEY");
UnlabelRequest request = client.buildRequest(new UnlabelFieldSet()
        .setUserId("billy_jones_301")
        .setAbuseType("payment_abuse"));

UnlabelResponse response;
try {
    response = request.send();
} catch (SiftException e) {
    System.out.println(e.getApiErrorMessage());
    return;
}
response.isOk(); // true
---




Webhooks API

Overview

You may use webhooks to receive notifications about particular events in Sift. When one
of the events is triggered, Sift will send a JSON payload to the webhook’s specified URL.
Webhooks can be used to update your own support tool, data warehouses, and more.
Authentication

Our webhook APIs are accessible using your API Keys. If you are a Sift product partner,
API keys must be provided by a customer.
All API requests should be made over HTTPS. Any call using HTTP or without authentication
will fail.


Create a webhook

Creates a new webhook with a specified URL.
Request


 payload_type -  REQUIRED · String The type of payload. Allowed Values
- ORDER_V1_0 This payload type provides an order data response. See our order object .
 status -  REQUIRED · String The status of the webhook. Allowed Values
- draft Indicates the webhook is in a draft state. No webhooks are sent.
- active Indicates the webhook is active. The webhook is live.
 url -  REQUIRED · String The URL of the webhook endpoint. This must be HTTPS.
 enabled_events -  REQUIRED · String The list of events to enable for this endpoint. These correspond to our
Reserved Events in our Events API. Possible enabled events
- $create_order Occurs whenever a $create_order API call is received.
- $update_order Occurs whenever a $update_order API call is received.
- order_status Occurs whenever a $order_status API call is received.
- $transaction Occurs whenever a $transaction API call is received.
- $chargeback Occurs whenever a $chargeback API call is received.
 name -  OPTIONAL · String An optional name you specify for this webhook
 description -  OPTIONAL · String An optional description about what the webhook is used for.
Response


 id -  String The id of the webhook.
 created -  Integer The time at which the webhook was created as a UNIX timestamp.
 last_updated -  Integer The time at which the webhook endpoint was last updated as a UNIX timestamp.
 name -  String The specified name of the webhook.
 description -  String The specified description of the webhook
 payload_type -  String The type of payload. Possible Values
- ORDER_V1_0 This payload type provides an order data response. See our order object .
 enabled_events -  String The list of events to enable for this endpoint. These correspond to our
Reserved Events in our Events API. Possible enabled events
- $create_order Occurs whenever a $create_order API call is received.
- $update_order Occurs whenever a $update_order API call is received.
- order_status Occurs whenever a $order_status API call is received.
- $transaction Occurs whenever a $transaction API call is received.
- $chargeback Occurs whenever a $chargeback API call is received.
 status -  String The status of the webhook. Possible Values
- draft Indicates the webhook is in a draft state. No webhooks are sent.
- active Indicates the webhook is active. The webhook is live.
 url -  String The URL of the webhook endpoint. This must be HTTPS.


Retrieve a Webhook 

Retrieves a webhook when given an ID.
Request

No arguments.
Response


 id -  String The id of the webhook.
 created -  Integer The time at which the webhook was created as a UNIX timestamp.
 last_updated -  Integer The time at which the webhook endpoint was last updated as a UNIX timestamp.
 name -  String The specified name of the webhook.
 description -  String The specified description of the webhook
 payload_type -  String The type of payload. Possible Values
- ORDER_V1_0 This payload type provides an order data response. See our order object .
 enabled_events -  String The list of events to enable for this endpoint. These correspond to our
Reserved Events in our Events API. Possible enabled events
- $create_order Occurs whenever a $create_order API call is received.
- $update_order Occurs whenever a $update_order API call is received.
- order_status Occurs whenever a $order_status API call is received.
- $transaction Occurs whenever a $transaction API call is received.
- $chargeback Occurs whenever a $chargeback API call is received.
 status -  String The status of the webhook. Possible Values
- draft Indicates the webhook is in a draft state. No webhooks are sent.
- active Indicates the webhook is active. The webhook is live.
 url -  String The URL of the webhook endpoint. This must be HTTPS.


List All Webhooks

Returns a list of all webhooks.
Request

No arguments.
Response


 data -  Array A list of all webhooks.


 data id -  String The id of the webhook.
 data created -  Integer The time at which the webhook was created as a UNIX timestamp.
 data last_updated -  Integer The time at which the webhook endpoint was last updated as a UNIX timestamp.
 data name -  String The specified name of the webhook.
 data description -  String The specified description of the webhook
 data payload_type -  String The type of payload. Possible Values
-
ORDER_V1_0
This payload type provides an order data response. See our order object.
 data enabled_events -  String The list of events to enable for this endpoint. These correspond to our
Reserved Events in our Events API. Possible enabled events
-
$create_order
Occurs whenever a $create_order API call is received.
-
$update_order
Occurs whenever a $update_order API call is received.
-
order_status
Occurs whenever a $order_status API call is received.
-
$transaction
Occurs whenever a $transaction API call is received.
-
$chargeback
Occurs whenever a $chargeback API call is received.
 data status -  String The status of the webhook. Possible Values
-
draft
Indicates the webhook is in a draft state. No webhooks are sent.
-
active
Indicates the webhook is active. The webhook is live.
 data url -  String The URL of the webhook endpoint. This must be HTTPS.


Update a Webhook

Updates a webhook when given an ID. This will overwrite the entire existing webhook object.
Request


 payload_type -  REQUIRED · String The type of payload. Allowed Values
- ORDER_V1_0 This payload type provides an order data response. See our order object .
 status -  REQUIRED · String The status of the webhook. Allowed Values
- draft Indicates the webhook is in a draft state. No webhooks are sent.
- active Indicates the webhook is active. The webhook is live.
 url -  REQUIRED · String The URL of the webhook endpoint. This must be HTTPS.
 enabled_events -  REQUIRED · String The list of events to enable for this endpoint. These correspond to our
Reserved Events in our Events API. Possible enabled events
- $create_order Occurs whenever a $create_order API call is received.
- $update_order Occurs whenever a $update_order API call is received.
- order_status Occurs whenever a $order_status API call is received.
- $transaction Occurs whenever a $transaction API call is received.
- $chargeback Occurs whenever a $chargeback API call is received.
 name -  OPTIONAL · String An optional name you specify for this webhook
 description -  OPTIONAL · String An optional description about what the webhook is used for.
Response


 id -  String The id of the webhook.
 created -  Integer The time at which the webhook was created as a UNIX timestamp.
 last_updated -  Integer The time at which the webhook endpoint was last updated as a UNIX timestamp.
 name -  String The specified name of the webhook.
 description -  String The specified description of the webhook
 payload_type -  String The type of payload. Possible Values
- ORDER_V1_0 This payload type provides an order data response. See our order object .
 enabled_events -  String The list of events to enable for this endpoint. These correspond to our
Reserved Events in our Events API. Possible enabled events
- $create_order Occurs whenever a $create_order API call is received.
- $update_order Occurs whenever a $update_order API call is received.
- order_status Occurs whenever a $order_status API call is received.
- $transaction Occurs whenever a $transaction API call is received.
- $chargeback Occurs whenever a $chargeback API call is received.
 status -  String The status of the webhook. Possible Values
- draft Indicates the webhook is in a draft state. No webhooks are sent.
- active Indicates the webhook is active. The webhook is live.
 url -  String The URL of the webhook endpoint. This must be HTTPS.


Delete a Webhook

Deletes a webhook when given an ID.
Request

No arguments.
Response

Response will contain no content and have an HTTP status of 204.


Orders

Overview

The Sift order is a collection of data sent by $create_order , $update_order , $order_status , $transaction , and $chargeback . Orders can be identified by a unique $order_id or $transaction_id.
Versioning

The Sift order object will be added to without updating the version. We will create a new version if there are any changes that are not backwards compatible with the current version. Please ensure not to hardcode a schema when integrating with the order object.


The Order Object

Attributes


 account_id -  String The order's Sift Account ID, which can be found in the Sift Console under the Developer Tab.
 event -  String Provided triggered via webhook, indicates the triggering webhook event. One of $create_order , $update_order , $order_status , $transaction , or $update_order .
 created -  Integer The UNIX timestamp in milliseconds at which the order was created.
 updated_at -  Integer The UNIX timestamp in milliseconds at which the order was last updated.
 order_id -  String The ID for tracking this order in your system.
 user_id -  String The user's account ID according to your systems. Note that user IDs are case sensitive.
 user_email -  String Email of the user who has created this order.
 ip -  String The ip address of the user that created the order.
 order_status -  String Indicates the state of the order. One of $approved, $canceled, $held, $fulfilled, or $returned .
 amount -  Integer Total transaction amount in micros in the base unit of the $currency_code. 1 cent = 10,000 microns. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of fractional denominations, like the Japanese Yen, use JPY 1000000 micros
 currency_code -  String ISO-4217 currency code for the amount.
 payment_methods -  Array of Payment Methods The payment information associated with the order. Contains the following attributes:
 ordered_from -  Ordered From Object The details about the specific location providing the good or service. This can be used to capture pickup, delivery locations, etc. See Ordered From.
 shipping_address -  Shipping Address Object The shipping address entered by the user. See Address.
 expedited_shipping -  Boolean Whether the user requested priority/expedited shipping on their order
 shipping_method -  String Indicates the method of delivery to the user.
 shipping_carrier -  String Shipping carrier for the shipment of the product.
 shipping_tracking_number -  deprecated · String Shipping tracking number of the product
 shipping_tracking_numbers -  Array of Strings Shipping tracking number(s) for the shipment of the product(s).
 items -  Array of Items The list of items ordered. Each item contains:
 bookings -  Array of Bookings The list of bookings made. This may include tickets and reservations like flights, hotels, rideshares etc.
Note: cannot be used in conjunction with $items .
 transactions -  Array of Transactions The list of transactions associated with the order. Each transaction contains:
 chargebacks -  Array of Chargebacks The list of chargebacks associated with the order. Each chargeback contains:
 latest_decisions -  Map The decisions map contains the most recent decision on the order. The map is keyed by abuse type, which could be one of: payment_abuse, account_abuse, content_abuse, promotion abuse, and legacy. Contains:
 scores -  Map The scores map contains the computed scores for all applicable abuse types. The map is keyed by abuse type, which could be one of: payment_abuse, account_abuse, content_abuse, promotion abuse, and legacy. Contains:
 site_country -  String Country the company is providing service from.
 site_domain -  String Domain being interfaced with.
 merchant_profile -  Merchant Profile Object The details about the merchant or seller providing the goods or service. Note: The merchant profile fields will have the '$' prefix removed in the response. See Merchant Profile.
 custom_fields -  Map The custom fields map contains the custom fields of an order.
 billing_address -  Billing Address Object The billing address of the order. See Address.


 payment_methods payment_type -  String The general type of payment being used.
 payment_methods card_bin -  String The first six or eight digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details.
 payment_methods card_last_4 -  String The last four digits of the credit card number.
 payment_methods payment_gateway -  String The specific gateway, company, product, etc. being used to process payment.
 payment_methods avs_result_code -  String Response code from the AVS address verification system. Used in payments involving credit cards.
 payment_methods cvv_result_code -  String Response code from the credit card company indicating if the CVV number matches the number on the record. Used in payments involving credit cards.
 payment_methods billing_address -  Billing Address Object The billing address entered by the user. See Address.


 items item_id -  String The item’s unique identifier.
 items product_title -  String The item’s name.
 items price -  Integer The item unit price in micros, in the base unit of the currency_code. 1 cent = 10,000 micros. $1.23 USD = 123 cents = 1,230,000 micros.
 items currency_code -  String ISO-4217 currency code for the price.


 transactions id -  String The ID for identifying this transaction. Important for tracking transactions, and liking different parts of the same transaction together, e.g. linking a refund to it’s original transaction.
 transactions transaction_type -  String The type of transaction being recorded. One of sale, authorize, capture, void, refund, deposit, withdrawal, or transfer .
 transactions transaction_time -  Integer The UNIX timestamp in milliseconds at which the transaction occurred.
 transactions amount -  Integer Total transaction amount in micros in the base unit of the $currency_code. 1 cent = 10,000 microns. $1.23 USD = 123 cents = 1,230,000 micros. For currencies without cents of fractional denominations, like the Japanese Yen, use JPY 1000000 micros.
 transactions currency_code -  String ISO-4217 currency code for the amount.


 chargebacks transaction_id -  String The transaction_id that this chargeback is linked to.
 chargebacks time -  Integer The UNIX timestamp in milliseconds at which the transaction occurred.
 chargebacks status -  String The current state of the chargeback.
 chargebacks reason -  String The reason for why the chargeback occurred. One of fraud, duplicate, product_not_received, product_unacceptable, other.


 latest_decisions id -  String The ID of the decision. This is derived from the decision name in the Console.
 latest_decisions type -  String The type of the decision taken on the entity. One of Red, Yellow, or Green
 latest_decisions time -  Integer The UNIX timestamp of when the decision was made.
 latest_decisions description -  String A description of the decision.


 scores score -  Float Score of the user between 0.0 and 1.0. A score of 0.5 translates to a score of 50 in the console.
 scores time -  Long The time at which the score was generated, as a UNIX timestamp.


PSP Merchant Management API

The PSP Merchants API allows payment service providers to create a summary of their merchant
portfolio in the Sift console. The API is an automated way to onboard, off-board merchants
providing fraud teams with a quick and easy way to view a summary of all merchants.
A PSP can use this API to create a record of key metadata related to the merchant including
MCC, Location, or an internal risk level.


Create Merchant

On-board a PSP merchant summary to Sift Platform.


Request

Every PSP merchant has to have a unique {id} .
Be sure to replace ${accountId} with your Sift account ID, found on the Profile Tab on the Console. Lastly, replace ${YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console.

 accountId -  String The Account ID of your organisation.
 merchantId -  String The unique ID of the PSP merchant for search
 merchantObject -  Object The merchant object payload. See PSP Merchant Object.




---Curl
merchantObject='{
  "id": "cf51f0ec-6078-46e9-a796-700af25e668c",
  "name": "Watson and Holmes",
  "description": "An example of a PSP Merchant. Illustrative.",
  "address": {
    "name": "Dr Watson",
    "address_1": "221B, Baker street",
    "address_2": "apt., 1",
    "city": "London",
    "region": "London",
    "country": "GB",
    "zipcode": "00001",
    "phone": "0122334455"
  },
  "category": "1002",
  "service_level": "Platinum",
  "status": "active",
  "risk_profile": {
    "level": "low",
    "score": 10
  }
}'

# Create a merchant
curl -X POST https://api.sift.com/v3/accounts/${accountId}/psp_management/merchants
     -H 'Content-Type: application/json'
     -u ${YOUR_API_KEY}:
     -d ${merchantObject}
---



Request

Every PSP merchant has to have a unique {id} .
Be sure to replace ${accountId} with your Sift account ID, found on the Profile Tab on the Console. Lastly, replace ${YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console.

 accountId -  String The Account ID of your organisation.
 merchantId -  String The unique ID of the PSP merchant for search
 merchantObject -  Object The merchant object payload. See PSP Merchant Object.


Edit Merchant

Update a merchant summary to reflect changes in the status or service level or address etc.


Request

Be sure to replace ${accountId} with your Sift account ID, found on the Profile Tab on the Console. Lastly, replace ${YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console.

 accountId -  String The Account ID of your organisation.
 merchantId -  String The unique ID of the PSP merchant for search
 merchantObject -  Object The merchant object payload. See PSP Merchant Object.




---Curl
merchantObject='{
  "id": "cf51f0ec-6078-46e9-a796-700af25e668c",
  `"name": "Watson and Holmes",
  "description": "An example of a PSP Merchant. Illustrative.",
  "address": {
    "name": "Dr Watson",
    "address_1": "221B, Baker street",
    "address_2": "apt., 1",
    "city": "London",
    "region": "London",
    "country": "GB",
    "zipcode": "00001",
    "phone": "0122334455"
  },
  "category": "1002",
  "service_level": "Platinum",
  "status": "active",
  "risk_profile": {
    "level": "low",
    "score": 10
  }
}'

# Update a merchant
curl -X PUT https://api.sift.com/v3/accounts/${accountId}/psp_management/merchants/${merchantId}
     -H 'Content-Type: application/json'
     -u ${YOUR_API_KEY}:
     -d ${merchantObject}
---



Request

Be sure to replace ${accountId} with your Sift account ID, found on the Profile Tab on the Console. Lastly, replace ${YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console.

 accountId -  String The Account ID of your organisation.
 merchantId -  String The unique ID of the PSP merchant for search
 merchantObject -  Object The merchant object payload. See PSP Merchant Object.


Get Merchant

Browse existing PSP merchant summaries.




Request

Obtain the latest PSP Merchant metadata by {id} .
Be sure to replace ${accountId} with your Sift account ID, found on the Profile Tab on the Console. Lastly, replace ${YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console.

 batchSize -  Integer Batch or page size of the paginated sequence.
 batchToken -  String Batch or page position of the paginated sequence.
 accountId -  String The Account ID of your organisation.
 merchantId -  String The unique ID of the PSP merchant for search




---Curl
# Get a merchant array
curl -XGET https://api.sift.com/v3/accounts/${accountId}/psp_management/merchants
     -H 'Content-Type: application/json'
     -u ${YOUR_API_KEY}:

# Get a merchant array paginated
curl -XGET https://api.sift.com/v3/accounts/${accountId}/psp_management/merchants?batch_size=${batchSize}&batch_token=${batchToken}
     -H 'Content-Type: application/json'
     -u ${YOUR_API_KEY}:

# Get a specific merchant by id
curl -XGET https://api.sift.com/v3/accounts/${accountId}/psp_management/merchants/${merchantId}
     -H 'Content-Type: application/json'
     -u ${YOUR_API_KEY}:

---







Batch Response


 next_ref -  String A reference to the next batch of merchants to iterate. For pagination.
 has_more -  Boolean Indicates if this PSP merchants batch is the last one. For pagination.
 schema -  String A schema name of the data items.
 data -  Array An array of Merchants in the current response batch. See PSP Merchant Object item.




---Curl
{
  "has_more": false,
  "next_ref": "-"
  "schema": "psp_merchant.json",
  "data": [
    {
      "id": "cf51f0ec-6078-46e9-a796-700af25e668c",
      "name": "Watson and Holmes",
      "description": "An example of a PSP Merchant. Illustrative.",
      "created_at": 1663162925457,
      "created_by": "hhdkka888rKKc",
      "last_updated_at": 1663162982915,
      "last_updated_by": "jkdjnueu7e7",
      "address": {
        "name": "Dr Watson",
        "address_1": "221B, Baker street",
        "address_2": "apt., 1",
        "city": "London",
        "region": "London",
        "country": "GB",
        "zipcode": "00001",
        "phone": "0122334455"
      },
      "category": "1002",
      "service_level": "Platinum",
      "status": "active",
      "risk_profile": {
        "level": "low",
        "score": 10
      }
    }
  ]
}

---







By ID Response

A successful response will contain a PSP Merchant Object item.




---Curl
{
  "id": "cf51f0ec-6078-46e9-a796-700af25e668c",
  "name": "Watson and Holmes",
  "description": "An example of a PSP Merchant. Illustrative.",
  "created_at": 1663162925457,
  "created_by": "hhdkka888rKKc",
  "last_updated_at": 1663162982915,
  "last_updated_by": "jkdjnueu7e7",
  "address": {
    "name": "Dr Watson",
    "address_1": "221B, Baker street",
    "address_2": "apt., 1",
    "city": "London",
    "region": "London",
    "country": "GB",
    "zipcode": "00001",
    "phone": "0122334455"
  },
  "category": "1002",
  "service_level": "Platinum",
  "status": "active",
  "risk_profile": {
    "level": "low",
    "score": 10
  }
}
---



Request

Obtain the latest PSP Merchant metadata by {id} .
Be sure to replace ${accountId} with your Sift account ID, found on the Profile Tab on the Console. Lastly, replace ${YOUR_API_KEY} with your REST API key, found in the API Keys tab of the Developer
page in the Console.

 batchSize -  Integer Batch or page size of the paginated sequence.
 batchToken -  String Batch or page position of the paginated sequence.
 accountId -  String The Account ID of your organisation.
 merchantId -  String The unique ID of the PSP merchant for search
Batch Response


 next_ref -  String A reference to the next batch of merchants to iterate. For pagination.
 has_more -  Boolean Indicates if this PSP merchants batch is the last one. For pagination.
 schema -  String A schema name of the data items.
 data -  Array An array of Merchants in the current response batch. See PSP Merchant Object item.
By ID Response

A successful response will contain a PSP Merchant Object item.


Merchant Object



Attributes


 id -  required · String A unique PSP merchant identifier.
 name -  required · String A PSP merchant name.
 description -  required · String A PSP merchant description.
 category -  required · String A merchants category code or ISO-18245 Merchant Category Code.
 service_level -  required · String A merchants service level as defined by the PSP if they offer a variety of services.
 created_at -  read-only · Long The time the PSP merchant was created, as a UNIX timestamp in milliseconds.
 created_by -  read-only · String The unique identifier of the creater agent.
 last_updated_by -  read-only · String The unique identifier of the updater agent.
 last_updated_at -  read-only · Long The time the PSP merchant was changed, as a UNIX timestamp in milliseconds.
 status -  required · String The status of the PSP merchant. Allowed Key Values
- active
- churned
- inactive
- paused
 risk_profile -  optional · Object The risk profile of the merchant as defined by the PSP during the on-boarding.
This can be an internal score or level.
 address -  required · Object Postal address of the PSP merchant.


 risk_profile score -  optional · Integer The risk score interpretation from lowest 0 to highest 100.
 risk_profile level -  optional · String The risk level name. Allowed Key Values
- low
- medium
- high


 address name -  optional · String Address name
 address address_1 -  optional · String Address line 1.
 address address_2 -  optional · String Address line 2.
 address city -  optional · String Address city.
 address region -  optional · String Address region.
 address country -  optional · String Address country.
 address zipcode -  optional · String Address zipcode.
 address phone -  optional · String Phone number.




---Curl
{
  "id": "cf51f0ec-6078-46e9-a796-700af25e668c",
  "name": "Watson and Holmes",
  "description": "An example of a PSP Merchant. Illustrative.",
  "created_at": 1663162925457,
  "created_by": "hhdkka888rKKc",
  "last_updated_at": 1663162982915,
  "last_updated_by": "jkdjnueu7e7",
  "address": {
    "name": "Dr Watson",
    "address_1": "221B, Baker street",
    "address_2": "apt., 1",
    "city": "London",
    "region": "London",
    "country": "GB",
    "zipcode": "00001",
    "phone": "0122334455"
  },
  "category": "1002",
  "service_level": "Platinum",
  "status": "active",
  "risk_profile": {
    "level": "low",
    "score": 10
  }
}
---



Attributes


 id -  required · String A unique PSP merchant identifier.
 name -  required · String A PSP merchant name.
 description -  required · String A PSP merchant description.
 category -  required · String A merchants category code or ISO-18245 Merchant Category Code.
 service_level -  required · String A merchants service level as defined by the PSP if they offer a variety of services.
 created_at -  read-only · Long The time the PSP merchant was created, as a UNIX timestamp in milliseconds.
 created_by -  read-only · String The unique identifier of the creater agent.
 last_updated_by -  read-only · String The unique identifier of the updater agent.
 last_updated_at -  read-only · Long The time the PSP merchant was changed, as a UNIX timestamp in milliseconds.
 status -  required · String The status of the PSP merchant. Allowed Key Values
- active
- churned
- inactive
- paused
 risk_profile -  optional · Object The risk profile of the merchant as defined by the PSP during the on-boarding.
This can be an internal score or level.
 address -  required · Object Postal address of the PSP merchant.


 risk_profile score -  optional · Integer The risk score interpretation from lowest 0 to highest 100.
 risk_profile level -  optional · String The risk level name. Allowed Key Values
- low
- medium
- high


 address name -  optional · String Address name
 address address_1 -  optional · String Address line 1.
 address address_2 -  optional · String Address line 2.
 address city -  optional · String Address city.
 address region -  optional · String Address region.
 address country -  optional · String Address country.
 address zipcode -  optional · String Address zipcode.
 address phone -  optional · String Phone number.
Secure your business from login to chargeback

Stop fraud, break down data silos, and lower friction with Sift.
 
-  Achieve up to 285% ROI
-   Increase user acceptance rates up to 99%
-   Drop time spent on manual review up to 80%